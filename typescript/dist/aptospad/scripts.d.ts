import { AptosDataCache, AptosParserRepo, AptosLocalCache } from "@manahippo/move-to-ts";
import { U64 } from "@manahippo/move-to-ts";
import { OptionTransaction } from "@manahippo/move-to-ts";
import { HexString, AptosClient, AptosAccount, TxnBuilderTypes, Types } from "aptos";
export declare const packageName = "AptosPad";
export declare const moduleAddress: HexString;
export declare const moduleName = "scripts";
export declare function addWhiteList_(admin: HexString, user: HexString, cap: U64, $c: AptosDataCache): void;
export declare function buildPayload_addWhiteList(user: HexString, cap: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function bidAptosPad_(user: HexString, amount: U64, $c: AptosDataCache): void;
export declare function buildPayload_bidAptosPad(amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function distributeSeason_(admin: HexString, $c: AptosDataCache): void;
export declare function buildPayload_distributeSeason(isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function initializeAptosPad_(admin: HexString, preFundAptos: U64, $c: AptosDataCache): void;
export declare function buildPayload_initializeAptosPad(preFundAptos: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function launchPadSeason_(admin: HexString, $c: AptosDataCache): void;
export declare function buildPayload_launchPadSeason(isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function paycoinAndRefund_(admin: HexString, $c: AptosDataCache): void;
export declare function buildPayload_paycoinAndRefund(isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function resetSeason_(admin: HexString, $c: AptosDataCache): void;
export declare function buildPayload_resetSeason(isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function setApttSwapConfig_(admin: HexString, softCap: U64, hardCap: U64, enableRefund: boolean, aptToApttRate: U64, bypassWhitelist: boolean, $c: AptosDataCache): void;
export declare function buildPayload_setApttSwapConfig(softCap: U64, hardCap: U64, enableRefund: boolean, aptToApttRate: U64, bypassWhitelist: boolean, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function setBypassWhiteList_(admin: HexString, bypass: boolean, $c: AptosDataCache): void;
export declare function buildPayload_setBypassWhiteList(bypass: boolean, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function setEmergency_(admin: HexString, emergency: boolean, $c: AptosDataCache): void;
export declare function buildPayload_setEmergency(emergency: boolean, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function whiteListSeason_(admin: HexString, $c: AptosDataCache): void;
export declare function buildPayload_whiteListSeason(isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function withdrawAptos_(admin: HexString, debit: HexString, amount: U64, $c: AptosDataCache): void;
export declare function buildPayload_withdrawAptos(debit: HexString, amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function withdrawAptosPad_(admin: HexString, debit: HexString, amount: U64, $c: AptosDataCache): void;
export declare function buildPayload_withdrawAptosPad(debit: HexString, amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function loadParsers(repo: AptosParserRepo): void;
export declare class App {
    client: AptosClient;
    repo: AptosParserRepo;
    cache: AptosLocalCache;
    constructor(client: AptosClient, repo: AptosParserRepo, cache: AptosLocalCache);
    get moduleAddress(): HexString;
    get moduleName(): string;
    payload_addWhiteList(user: HexString, cap: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    addWhiteList(_account: AptosAccount, user: HexString, cap: U64, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_bidAptosPad(amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    bidAptosPad(_account: AptosAccount, amount: U64, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_distributeSeason(isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    distributeSeason(_account: AptosAccount, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_initializeAptosPad(preFundAptos: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    initializeAptosPad(_account: AptosAccount, preFundAptos: U64, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_launchPadSeason(isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    launchPadSeason(_account: AptosAccount, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_paycoinAndRefund(isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    paycoinAndRefund(_account: AptosAccount, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_resetSeason(isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    resetSeason(_account: AptosAccount, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_setApttSwapConfig(softCap: U64, hardCap: U64, enableRefund: boolean, aptToApttRate: U64, bypassWhitelist: boolean, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    setApttSwapConfig(_account: AptosAccount, softCap: U64, hardCap: U64, enableRefund: boolean, aptToApttRate: U64, bypassWhitelist: boolean, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_setBypassWhiteList(bypass: boolean, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    setBypassWhiteList(_account: AptosAccount, bypass: boolean, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_setEmergency(emergency: boolean, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    setEmergency(_account: AptosAccount, emergency: boolean, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_whiteListSeason(isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    whiteListSeason(_account: AptosAccount, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_withdrawAptos(debit: HexString, amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    withdrawAptos(_account: AptosAccount, debit: HexString, amount: U64, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_withdrawAptosPad(debit: HexString, amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    withdrawAptosPad(_account: AptosAccount, debit: HexString, amount: U64, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
}
//# sourceMappingURL=scripts.d.ts.map