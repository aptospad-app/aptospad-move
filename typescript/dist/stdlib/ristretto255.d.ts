import * as $ from "@manahippo/move-to-ts";
import { AptosDataCache, AptosParserRepo, AptosLocalCache } from "@manahippo/move-to-ts";
import { U8, U64, U128 } from "@manahippo/move-to-ts";
import { TypeParamDeclType, FieldDeclType } from "@manahippo/move-to-ts";
import { StructTag, TypeTag } from "@manahippo/move-to-ts";
import { HexString, AptosClient } from "aptos";
import * as Option from "./option";
export declare const packageName = "AptosStdlib";
export declare const moduleAddress: HexString;
export declare const moduleName = "ristretto255";
export declare const A_PLUS_B_POINT: U8[];
export declare const A_PLUS_B_SCALAR: U8[];
export declare const A_POINT: U8[];
export declare const A_SCALAR: U8[];
export declare const A_TIMES_BASE_POINT: U8[];
export declare const A_TIMES_B_SCALAR: U8[];
export declare const BASE_POINT: U8[];
export declare const B_POINT: U8[];
export declare const B_SCALAR: U8[];
export declare const E_DIFFERENT_NUM_POINTS_AND_SCALARS: U64;
export declare const E_ZERO_POINTS: U64;
export declare const E_ZERO_SCALARS: U64;
export declare const L_MINUS_ONE: U8[];
export declare const L_PLUS_ONE: U8[];
export declare const L_PLUS_TWO: U8[];
export declare const MAX_POINT_NUM_BYTES: U64;
export declare const MAX_SCALAR_NUM_BITS: U64;
export declare const MAX_SCALAR_NUM_BYTES: U64;
export declare const NON_CANONICAL_ALL_ONES: U8[];
export declare const ORDER_ELL: U8[];
export declare const REDUCED_2_256_MINUS_1_SCALAR: U8[];
export declare const REDUCED_X_PLUS_2_TO_256_TIMES_X_SCALAR: U8[];
export declare const TWO_SCALAR: U8[];
export declare const X_INV_SCALAR: U8[];
export declare const X_SCALAR: U8[];
export declare const X_TIMES_Y_SCALAR: U8[];
export declare const Y_SCALAR: U8[];
export declare class CompressedRistretto {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    data: U8[];
    constructor(proto: any, typeTag: TypeTag);
    static CompressedRistrettoParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): CompressedRistretto;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class RistrettoPoint {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    handle: U64;
    constructor(proto: any, typeTag: TypeTag);
    static RistrettoPointParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): RistrettoPoint;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class Scalar {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    data: U8[];
    constructor(proto: any, typeTag: TypeTag);
    static ScalarParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): Scalar;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare function basepoint_($c: AptosDataCache): RistrettoPoint;
export declare function basepoint_compressed_($c: AptosDataCache): CompressedRistretto;
export declare function basepoint_double_mul_(a: Scalar, some_point: RistrettoPoint, b: Scalar, $c: AptosDataCache): RistrettoPoint;
export declare function basepoint_double_mul_internal_(a: U8[], some_point: RistrettoPoint, b: U8[], $c: AptosDataCache): U64;
export declare function basepoint_mul_(a: Scalar, $c: AptosDataCache): RistrettoPoint;
export declare function basepoint_mul_internal_(a: U8[], $c: AptosDataCache): U64;
export declare function multi_scalar_mul_(points: RistrettoPoint[], scalars: Scalar[], $c: AptosDataCache): RistrettoPoint;
export declare function multi_scalar_mul_internal_(points: any[], scalars: any[], $c: AptosDataCache, $p: TypeTag[]): U64;
export declare function new_compressed_point_from_bytes_(bytes: U8[], $c: AptosDataCache): Option.Option;
export declare function new_point_from_64_uniform_bytes_(bytes: U8[], $c: AptosDataCache): Option.Option;
export declare function new_point_from_64_uniform_bytes_internal_(bytes: U8[], $c: AptosDataCache): U64;
export declare function new_point_from_bytes_(bytes: U8[], $c: AptosDataCache): Option.Option;
export declare function new_point_from_sha512_(sha512: U8[], $c: AptosDataCache): RistrettoPoint;
export declare function new_point_from_sha512_internal_(sha512: U8[], $c: AptosDataCache): U64;
export declare function new_scalar_from_bytes_(bytes: U8[], $c: AptosDataCache): Option.Option;
export declare function new_scalar_from_sha512_(sha512_input: U8[], $c: AptosDataCache): Scalar;
export declare function new_scalar_from_u128_(sixteen_bytes: U128, $c: AptosDataCache): Scalar;
export declare function new_scalar_from_u64_(eight_bytes: U64, $c: AptosDataCache): Scalar;
export declare function new_scalar_from_u8_(byte: U8, $c: AptosDataCache): Scalar;
export declare function new_scalar_reduced_from_32_bytes_(bytes: U8[], $c: AptosDataCache): Option.Option;
export declare function new_scalar_uniform_from_64_bytes_(bytes: U8[], $c: AptosDataCache): Option.Option;
export declare function point_add_(a: RistrettoPoint, b: RistrettoPoint, $c: AptosDataCache): RistrettoPoint;
export declare function point_add_assign_(a: RistrettoPoint, b: RistrettoPoint, $c: AptosDataCache): RistrettoPoint;
export declare function point_add_internal_(a: RistrettoPoint, b: RistrettoPoint, in_place: boolean, $c: AptosDataCache): U64;
export declare function point_compress_(point: RistrettoPoint, $c: AptosDataCache): CompressedRistretto;
export declare function point_compress_internal_(point: RistrettoPoint, $c: AptosDataCache): U8[];
export declare function point_decompress_(point: CompressedRistretto, $c: AptosDataCache): RistrettoPoint;
export declare function point_decompress_internal_(maybe_non_canonical_bytes: U8[], $c: AptosDataCache): [U64, boolean];
export declare function point_equals_(g: RistrettoPoint, h: RistrettoPoint, $c: AptosDataCache): boolean;
export declare function point_identity_($c: AptosDataCache): RistrettoPoint;
export declare function point_identity_compressed_($c: AptosDataCache): CompressedRistretto;
export declare function point_identity_internal_($c: AptosDataCache): U64;
export declare function point_is_canonical_internal_(bytes: U8[], $c: AptosDataCache): boolean;
export declare function point_mul_(point: RistrettoPoint, a: Scalar, $c: AptosDataCache): RistrettoPoint;
export declare function point_mul_assign_(point: RistrettoPoint, a: Scalar, $c: AptosDataCache): RistrettoPoint;
export declare function point_mul_internal_(point: RistrettoPoint, a: U8[], in_place: boolean, $c: AptosDataCache): U64;
export declare function point_neg_(a: RistrettoPoint, $c: AptosDataCache): RistrettoPoint;
export declare function point_neg_assign_(a: RistrettoPoint, $c: AptosDataCache): RistrettoPoint;
export declare function point_neg_internal_(a: RistrettoPoint, in_place: boolean, $c: AptosDataCache): U64;
export declare function point_sub_(a: RistrettoPoint, b: RistrettoPoint, $c: AptosDataCache): RistrettoPoint;
export declare function point_sub_assign_(a: RistrettoPoint, b: RistrettoPoint, $c: AptosDataCache): RistrettoPoint;
export declare function point_sub_internal_(a: RistrettoPoint, b: RistrettoPoint, in_place: boolean, $c: AptosDataCache): U64;
export declare function point_to_bytes_(point: CompressedRistretto, $c: AptosDataCache): U8[];
export declare function scalar_add_(a: Scalar, b: Scalar, $c: AptosDataCache): Scalar;
export declare function scalar_add_assign_(a: Scalar, b: Scalar, $c: AptosDataCache): Scalar;
export declare function scalar_add_internal_(a_bytes: U8[], b_bytes: U8[], $c: AptosDataCache): U8[];
export declare function scalar_equals_(lhs: Scalar, rhs: Scalar, $c: AptosDataCache): boolean;
export declare function scalar_from_sha512_internal_(sha512_input: U8[], $c: AptosDataCache): U8[];
export declare function scalar_from_u128_internal_(num: U128, $c: AptosDataCache): U8[];
export declare function scalar_from_u64_internal_(num: U64, $c: AptosDataCache): U8[];
export declare function scalar_invert_(s: Scalar, $c: AptosDataCache): Option.Option;
export declare function scalar_invert_internal_(bytes: U8[], $c: AptosDataCache): U8[];
export declare function scalar_is_canonical_internal_(s: U8[], $c: AptosDataCache): boolean;
export declare function scalar_is_one_(s: Scalar, $c: AptosDataCache): boolean;
export declare function scalar_is_zero_(s: Scalar, $c: AptosDataCache): boolean;
export declare function scalar_mul_(a: Scalar, b: Scalar, $c: AptosDataCache): Scalar;
export declare function scalar_mul_assign_(a: Scalar, b: Scalar, $c: AptosDataCache): Scalar;
export declare function scalar_mul_internal_(a_bytes: U8[], b_bytes: U8[], $c: AptosDataCache): U8[];
export declare function scalar_neg_(a: Scalar, $c: AptosDataCache): Scalar;
export declare function scalar_neg_assign_(a: Scalar, $c: AptosDataCache): Scalar;
export declare function scalar_neg_internal_(a_bytes: U8[], $c: AptosDataCache): U8[];
export declare function scalar_one_($c: AptosDataCache): Scalar;
export declare function scalar_reduced_from_32_bytes_internal_(bytes: U8[], $c: AptosDataCache): U8[];
export declare function scalar_sub_(a: Scalar, b: Scalar, $c: AptosDataCache): Scalar;
export declare function scalar_sub_assign_(a: Scalar, b: Scalar, $c: AptosDataCache): Scalar;
export declare function scalar_sub_internal_(a_bytes: U8[], b_bytes: U8[], $c: AptosDataCache): U8[];
export declare function scalar_to_bytes_(s: Scalar, $c: AptosDataCache): U8[];
export declare function scalar_uniform_from_64_bytes_internal_(bytes: U8[], $c: AptosDataCache): U8[];
export declare function scalar_zero_($c: AptosDataCache): Scalar;
export declare function loadParsers(repo: AptosParserRepo): void;
export declare class App {
    client: AptosClient;
    repo: AptosParserRepo;
    cache: AptosLocalCache;
    constructor(client: AptosClient, repo: AptosParserRepo, cache: AptosLocalCache);
    get moduleAddress(): HexString;
    get moduleName(): string;
    get CompressedRistretto(): typeof CompressedRistretto;
    get RistrettoPoint(): typeof RistrettoPoint;
    get Scalar(): typeof Scalar;
}
//# sourceMappingURL=ristretto255.d.ts.map