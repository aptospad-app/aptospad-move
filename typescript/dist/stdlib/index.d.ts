import { AptosClient } from "aptos";
import { AptosParserRepo, AptosLocalCache } from "@manahippo/move-to-ts";
import * as Account from './account';
import * as Acl from './acl';
import * as Aggregator from './aggregator';
import * as Aggregator_factory from './aggregator_factory';
import * as Any from './any';
import * as Aptos_account from './aptos_account';
import * as Aptos_coin from './aptos_coin';
import * as Aptos_governance from './aptos_governance';
import * as Aptos_hash from './aptos_hash';
import * as Bcs from './bcs';
import * as Bit_vector from './bit_vector';
import * as Block from './block';
import * as Bls12381 from './bls12381';
import * as Capability from './capability';
import * as Chain_id from './chain_id';
import * as Chain_status from './chain_status';
import * as Code from './code';
import * as Coin from './coin';
import * as Comparator from './comparator';
import * as Consensus_config from './consensus_config';
import * as Copyable_any from './copyable_any';
import * as Debug from './debug';
import * as Ed25519 from './ed25519';
import * as Error from './error';
import * as Event from './event';
import * as Features from './features';
import * as Fixed_point32 from './fixed_point32';
import * as From_bcs from './from_bcs';
import * as Gas_schedule from './gas_schedule';
import * as Genesis from './genesis';
import * as Governance_proposal from './governance_proposal';
import * as Guid from './guid';
import * as Hash from './hash';
import * as Managed_coin from './managed_coin';
import * as Math128 from './math128';
import * as Math64 from './math64';
import * as Multi_ed25519 from './multi_ed25519';
import * as Option from './option';
import * as Optional_aggregator from './optional_aggregator';
import * as Pool_u64 from './pool_u64';
import * as Reconfiguration from './reconfiguration';
import * as Resource_account from './resource_account';
import * as Ristretto255 from './ristretto255';
import * as Secp256k1 from './secp256k1';
import * as Signer from './signer';
import * as Simple_map from './simple_map';
import * as Stake from './stake';
import * as Staking_config from './staking_config';
import * as Staking_contract from './staking_contract';
import * as Staking_proxy from './staking_proxy';
import * as State_storage from './state_storage';
import * as Storage_gas from './storage_gas';
import * as String from './string';
import * as System_addresses from './system_addresses';
import * as Table from './table';
import * as Table_with_length from './table_with_length';
import * as Timestamp from './timestamp';
import * as Transaction_context from './transaction_context';
import * as Transaction_fee from './transaction_fee';
import * as Transaction_validation from './transaction_validation';
import * as Type_info from './type_info';
import * as Util from './util';
import * as Vector from './vector';
import * as Version from './version';
import * as Vesting from './vesting';
import * as Voting from './voting';
export * as Account from './account';
export * as Acl from './acl';
export * as Aggregator from './aggregator';
export * as Aggregator_factory from './aggregator_factory';
export * as Any from './any';
export * as Aptos_account from './aptos_account';
export * as Aptos_coin from './aptos_coin';
export * as Aptos_governance from './aptos_governance';
export * as Aptos_hash from './aptos_hash';
export * as Bcs from './bcs';
export * as Bit_vector from './bit_vector';
export * as Block from './block';
export * as Bls12381 from './bls12381';
export * as Capability from './capability';
export * as Chain_id from './chain_id';
export * as Chain_status from './chain_status';
export * as Code from './code';
export * as Coin from './coin';
export * as Comparator from './comparator';
export * as Consensus_config from './consensus_config';
export * as Copyable_any from './copyable_any';
export * as Debug from './debug';
export * as Ed25519 from './ed25519';
export * as Error from './error';
export * as Event from './event';
export * as Features from './features';
export * as Fixed_point32 from './fixed_point32';
export * as From_bcs from './from_bcs';
export * as Gas_schedule from './gas_schedule';
export * as Genesis from './genesis';
export * as Governance_proposal from './governance_proposal';
export * as Guid from './guid';
export * as Hash from './hash';
export * as Managed_coin from './managed_coin';
export * as Math128 from './math128';
export * as Math64 from './math64';
export * as Multi_ed25519 from './multi_ed25519';
export * as Option from './option';
export * as Optional_aggregator from './optional_aggregator';
export * as Pool_u64 from './pool_u64';
export * as Reconfiguration from './reconfiguration';
export * as Resource_account from './resource_account';
export * as Ristretto255 from './ristretto255';
export * as Secp256k1 from './secp256k1';
export * as Signer from './signer';
export * as Simple_map from './simple_map';
export * as Stake from './stake';
export * as Staking_config from './staking_config';
export * as Staking_contract from './staking_contract';
export * as Staking_proxy from './staking_proxy';
export * as State_storage from './state_storage';
export * as Storage_gas from './storage_gas';
export * as String from './string';
export * as System_addresses from './system_addresses';
export * as Table from './table';
export * as Table_with_length from './table_with_length';
export * as Timestamp from './timestamp';
export * as Transaction_context from './transaction_context';
export * as Transaction_fee from './transaction_fee';
export * as Transaction_validation from './transaction_validation';
export * as Type_info from './type_info';
export * as Util from './util';
export * as Vector from './vector';
export * as Version from './version';
export * as Vesting from './vesting';
export * as Voting from './voting';
export declare function loadParsers(repo: AptosParserRepo): void;
export declare function getPackageRepo(): AptosParserRepo;
export type AppType = {
    client: AptosClient;
    repo: AptosParserRepo;
    cache: AptosLocalCache;
};
export declare class App {
    client: AptosClient;
    repo: AptosParserRepo;
    cache: AptosLocalCache;
    account: Account.App;
    acl: Acl.App;
    aggregator: Aggregator.App;
    aggregator_factory: Aggregator_factory.App;
    any: Any.App;
    aptos_account: Aptos_account.App;
    aptos_coin: Aptos_coin.App;
    aptos_governance: Aptos_governance.App;
    aptos_hash: Aptos_hash.App;
    bcs: Bcs.App;
    bit_vector: Bit_vector.App;
    block: Block.App;
    bls12381: Bls12381.App;
    capability: Capability.App;
    chain_id: Chain_id.App;
    chain_status: Chain_status.App;
    code: Code.App;
    coin: Coin.App;
    comparator: Comparator.App;
    consensus_config: Consensus_config.App;
    copyable_any: Copyable_any.App;
    debug: Debug.App;
    ed25519: Ed25519.App;
    error: Error.App;
    event: Event.App;
    features: Features.App;
    fixed_point32: Fixed_point32.App;
    from_bcs: From_bcs.App;
    gas_schedule: Gas_schedule.App;
    genesis: Genesis.App;
    governance_proposal: Governance_proposal.App;
    guid: Guid.App;
    hash: Hash.App;
    managed_coin: Managed_coin.App;
    math128: Math128.App;
    math64: Math64.App;
    multi_ed25519: Multi_ed25519.App;
    option: Option.App;
    optional_aggregator: Optional_aggregator.App;
    pool_u64: Pool_u64.App;
    reconfiguration: Reconfiguration.App;
    resource_account: Resource_account.App;
    ristretto255: Ristretto255.App;
    secp256k1: Secp256k1.App;
    signer: Signer.App;
    simple_map: Simple_map.App;
    stake: Stake.App;
    staking_config: Staking_config.App;
    staking_contract: Staking_contract.App;
    staking_proxy: Staking_proxy.App;
    state_storage: State_storage.App;
    storage_gas: Storage_gas.App;
    string: String.App;
    system_addresses: System_addresses.App;
    table: Table.App;
    table_with_length: Table_with_length.App;
    timestamp: Timestamp.App;
    transaction_context: Transaction_context.App;
    transaction_fee: Transaction_fee.App;
    transaction_validation: Transaction_validation.App;
    type_info: Type_info.App;
    util: Util.App;
    vector: Vector.App;
    version: Version.App;
    vesting: Vesting.App;
    voting: Voting.App;
    constructor(client: AptosClient, repo: AptosParserRepo, cache: AptosLocalCache);
}
//# sourceMappingURL=index.d.ts.map