"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Staking_proxy = exports.Staking_contract = exports.Staking_config = exports.Stake = exports.Simple_map = exports.Signer = exports.Secp256k1 = exports.Ristretto255 = exports.Resource_account = exports.Reconfiguration = exports.Pool_u64 = exports.Optional_aggregator = exports.Option = exports.Multi_ed25519 = exports.Math64 = exports.Math128 = exports.Managed_coin = exports.Hash = exports.Guid = exports.Governance_proposal = exports.Genesis = exports.Gas_schedule = exports.From_bcs = exports.Fixed_point32 = exports.Features = exports.Event = exports.Error = exports.Ed25519 = exports.Debug = exports.Copyable_any = exports.Consensus_config = exports.Comparator = exports.Coin = exports.Code = exports.Chain_status = exports.Chain_id = exports.Capability = exports.Bls12381 = exports.Block = exports.Bit_vector = exports.Bcs = exports.Aptos_hash = exports.Aptos_governance = exports.Aptos_coin = exports.Aptos_account = exports.Any = exports.Aggregator_factory = exports.Aggregator = exports.Acl = exports.Account = void 0;
exports.App = exports.getPackageRepo = exports.loadParsers = exports.Voting = exports.Vesting = exports.Version = exports.Vector = exports.Util = exports.Type_info = exports.Transaction_validation = exports.Transaction_fee = exports.Transaction_context = exports.Timestamp = exports.Table_with_length = exports.Table = exports.System_addresses = exports.String = exports.Storage_gas = exports.State_storage = void 0;
const move_to_ts_1 = require("@manahippo/move-to-ts");
const Account = __importStar(require("./account"));
const Acl = __importStar(require("./acl"));
const Aggregator = __importStar(require("./aggregator"));
const Aggregator_factory = __importStar(require("./aggregator_factory"));
const Any = __importStar(require("./any"));
const Aptos_account = __importStar(require("./aptos_account"));
const Aptos_coin = __importStar(require("./aptos_coin"));
const Aptos_governance = __importStar(require("./aptos_governance"));
const Aptos_hash = __importStar(require("./aptos_hash"));
const Bcs = __importStar(require("./bcs"));
const Bit_vector = __importStar(require("./bit_vector"));
const Block = __importStar(require("./block"));
const Bls12381 = __importStar(require("./bls12381"));
const Capability = __importStar(require("./capability"));
const Chain_id = __importStar(require("./chain_id"));
const Chain_status = __importStar(require("./chain_status"));
const Code = __importStar(require("./code"));
const Coin = __importStar(require("./coin"));
const Comparator = __importStar(require("./comparator"));
const Consensus_config = __importStar(require("./consensus_config"));
const Copyable_any = __importStar(require("./copyable_any"));
const Debug = __importStar(require("./debug"));
const Ed25519 = __importStar(require("./ed25519"));
const Error = __importStar(require("./error"));
const Event = __importStar(require("./event"));
const Features = __importStar(require("./features"));
const Fixed_point32 = __importStar(require("./fixed_point32"));
const From_bcs = __importStar(require("./from_bcs"));
const Gas_schedule = __importStar(require("./gas_schedule"));
const Genesis = __importStar(require("./genesis"));
const Governance_proposal = __importStar(require("./governance_proposal"));
const Guid = __importStar(require("./guid"));
const Hash = __importStar(require("./hash"));
const Managed_coin = __importStar(require("./managed_coin"));
const Math128 = __importStar(require("./math128"));
const Math64 = __importStar(require("./math64"));
const Multi_ed25519 = __importStar(require("./multi_ed25519"));
const Option = __importStar(require("./option"));
const Optional_aggregator = __importStar(require("./optional_aggregator"));
const Pool_u64 = __importStar(require("./pool_u64"));
const Reconfiguration = __importStar(require("./reconfiguration"));
const Resource_account = __importStar(require("./resource_account"));
const Ristretto255 = __importStar(require("./ristretto255"));
const Secp256k1 = __importStar(require("./secp256k1"));
const Signer = __importStar(require("./signer"));
const Simple_map = __importStar(require("./simple_map"));
const Stake = __importStar(require("./stake"));
const Staking_config = __importStar(require("./staking_config"));
const Staking_contract = __importStar(require("./staking_contract"));
const Staking_proxy = __importStar(require("./staking_proxy"));
const State_storage = __importStar(require("./state_storage"));
const Storage_gas = __importStar(require("./storage_gas"));
const String = __importStar(require("./string"));
const System_addresses = __importStar(require("./system_addresses"));
const Table = __importStar(require("./table"));
const Table_with_length = __importStar(require("./table_with_length"));
const Timestamp = __importStar(require("./timestamp"));
const Transaction_context = __importStar(require("./transaction_context"));
const Transaction_fee = __importStar(require("./transaction_fee"));
const Transaction_validation = __importStar(require("./transaction_validation"));
const Type_info = __importStar(require("./type_info"));
const Util = __importStar(require("./util"));
const Vector = __importStar(require("./vector"));
const Version = __importStar(require("./version"));
const Vesting = __importStar(require("./vesting"));
const Voting = __importStar(require("./voting"));
exports.Account = __importStar(require("./account"));
exports.Acl = __importStar(require("./acl"));
exports.Aggregator = __importStar(require("./aggregator"));
exports.Aggregator_factory = __importStar(require("./aggregator_factory"));
exports.Any = __importStar(require("./any"));
exports.Aptos_account = __importStar(require("./aptos_account"));
exports.Aptos_coin = __importStar(require("./aptos_coin"));
exports.Aptos_governance = __importStar(require("./aptos_governance"));
exports.Aptos_hash = __importStar(require("./aptos_hash"));
exports.Bcs = __importStar(require("./bcs"));
exports.Bit_vector = __importStar(require("./bit_vector"));
exports.Block = __importStar(require("./block"));
exports.Bls12381 = __importStar(require("./bls12381"));
exports.Capability = __importStar(require("./capability"));
exports.Chain_id = __importStar(require("./chain_id"));
exports.Chain_status = __importStar(require("./chain_status"));
exports.Code = __importStar(require("./code"));
exports.Coin = __importStar(require("./coin"));
exports.Comparator = __importStar(require("./comparator"));
exports.Consensus_config = __importStar(require("./consensus_config"));
exports.Copyable_any = __importStar(require("./copyable_any"));
exports.Debug = __importStar(require("./debug"));
exports.Ed25519 = __importStar(require("./ed25519"));
exports.Error = __importStar(require("./error"));
exports.Event = __importStar(require("./event"));
exports.Features = __importStar(require("./features"));
exports.Fixed_point32 = __importStar(require("./fixed_point32"));
exports.From_bcs = __importStar(require("./from_bcs"));
exports.Gas_schedule = __importStar(require("./gas_schedule"));
exports.Genesis = __importStar(require("./genesis"));
exports.Governance_proposal = __importStar(require("./governance_proposal"));
exports.Guid = __importStar(require("./guid"));
exports.Hash = __importStar(require("./hash"));
exports.Managed_coin = __importStar(require("./managed_coin"));
exports.Math128 = __importStar(require("./math128"));
exports.Math64 = __importStar(require("./math64"));
exports.Multi_ed25519 = __importStar(require("./multi_ed25519"));
exports.Option = __importStar(require("./option"));
exports.Optional_aggregator = __importStar(require("./optional_aggregator"));
exports.Pool_u64 = __importStar(require("./pool_u64"));
exports.Reconfiguration = __importStar(require("./reconfiguration"));
exports.Resource_account = __importStar(require("./resource_account"));
exports.Ristretto255 = __importStar(require("./ristretto255"));
exports.Secp256k1 = __importStar(require("./secp256k1"));
exports.Signer = __importStar(require("./signer"));
exports.Simple_map = __importStar(require("./simple_map"));
exports.Stake = __importStar(require("./stake"));
exports.Staking_config = __importStar(require("./staking_config"));
exports.Staking_contract = __importStar(require("./staking_contract"));
exports.Staking_proxy = __importStar(require("./staking_proxy"));
exports.State_storage = __importStar(require("./state_storage"));
exports.Storage_gas = __importStar(require("./storage_gas"));
exports.String = __importStar(require("./string"));
exports.System_addresses = __importStar(require("./system_addresses"));
exports.Table = __importStar(require("./table"));
exports.Table_with_length = __importStar(require("./table_with_length"));
exports.Timestamp = __importStar(require("./timestamp"));
exports.Transaction_context = __importStar(require("./transaction_context"));
exports.Transaction_fee = __importStar(require("./transaction_fee"));
exports.Transaction_validation = __importStar(require("./transaction_validation"));
exports.Type_info = __importStar(require("./type_info"));
exports.Util = __importStar(require("./util"));
exports.Vector = __importStar(require("./vector"));
exports.Version = __importStar(require("./version"));
exports.Vesting = __importStar(require("./vesting"));
exports.Voting = __importStar(require("./voting"));
function loadParsers(repo) {
    Account.loadParsers(repo);
    Acl.loadParsers(repo);
    Aggregator.loadParsers(repo);
    Aggregator_factory.loadParsers(repo);
    Any.loadParsers(repo);
    Aptos_account.loadParsers(repo);
    Aptos_coin.loadParsers(repo);
    Aptos_governance.loadParsers(repo);
    Aptos_hash.loadParsers(repo);
    Bcs.loadParsers(repo);
    Bit_vector.loadParsers(repo);
    Block.loadParsers(repo);
    Bls12381.loadParsers(repo);
    Capability.loadParsers(repo);
    Chain_id.loadParsers(repo);
    Chain_status.loadParsers(repo);
    Code.loadParsers(repo);
    Coin.loadParsers(repo);
    Comparator.loadParsers(repo);
    Consensus_config.loadParsers(repo);
    Copyable_any.loadParsers(repo);
    Debug.loadParsers(repo);
    Ed25519.loadParsers(repo);
    Error.loadParsers(repo);
    Event.loadParsers(repo);
    Features.loadParsers(repo);
    Fixed_point32.loadParsers(repo);
    From_bcs.loadParsers(repo);
    Gas_schedule.loadParsers(repo);
    Genesis.loadParsers(repo);
    Governance_proposal.loadParsers(repo);
    Guid.loadParsers(repo);
    Hash.loadParsers(repo);
    Managed_coin.loadParsers(repo);
    Math128.loadParsers(repo);
    Math64.loadParsers(repo);
    Multi_ed25519.loadParsers(repo);
    Option.loadParsers(repo);
    Optional_aggregator.loadParsers(repo);
    Pool_u64.loadParsers(repo);
    Reconfiguration.loadParsers(repo);
    Resource_account.loadParsers(repo);
    Ristretto255.loadParsers(repo);
    Secp256k1.loadParsers(repo);
    Signer.loadParsers(repo);
    Simple_map.loadParsers(repo);
    Stake.loadParsers(repo);
    Staking_config.loadParsers(repo);
    Staking_contract.loadParsers(repo);
    Staking_proxy.loadParsers(repo);
    State_storage.loadParsers(repo);
    Storage_gas.loadParsers(repo);
    String.loadParsers(repo);
    System_addresses.loadParsers(repo);
    Table.loadParsers(repo);
    Table_with_length.loadParsers(repo);
    Timestamp.loadParsers(repo);
    Transaction_context.loadParsers(repo);
    Transaction_fee.loadParsers(repo);
    Transaction_validation.loadParsers(repo);
    Type_info.loadParsers(repo);
    Util.loadParsers(repo);
    Vector.loadParsers(repo);
    Version.loadParsers(repo);
    Vesting.loadParsers(repo);
    Voting.loadParsers(repo);
}
exports.loadParsers = loadParsers;
function getPackageRepo() {
    const repo = new move_to_ts_1.AptosParserRepo();
    loadParsers(repo);
    repo.addDefaultParsers();
    return repo;
}
exports.getPackageRepo = getPackageRepo;
class App {
    constructor(client, repo, cache) {
        this.client = client;
        this.repo = repo;
        this.cache = cache;
        this.account = new Account.App(client, repo, cache);
        this.acl = new Acl.App(client, repo, cache);
        this.aggregator = new Aggregator.App(client, repo, cache);
        this.aggregator_factory = new Aggregator_factory.App(client, repo, cache);
        this.any = new Any.App(client, repo, cache);
        this.aptos_account = new Aptos_account.App(client, repo, cache);
        this.aptos_coin = new Aptos_coin.App(client, repo, cache);
        this.aptos_governance = new Aptos_governance.App(client, repo, cache);
        this.aptos_hash = new Aptos_hash.App(client, repo, cache);
        this.bcs = new Bcs.App(client, repo, cache);
        this.bit_vector = new Bit_vector.App(client, repo, cache);
        this.block = new Block.App(client, repo, cache);
        this.bls12381 = new Bls12381.App(client, repo, cache);
        this.capability = new Capability.App(client, repo, cache);
        this.chain_id = new Chain_id.App(client, repo, cache);
        this.chain_status = new Chain_status.App(client, repo, cache);
        this.code = new Code.App(client, repo, cache);
        this.coin = new Coin.App(client, repo, cache);
        this.comparator = new Comparator.App(client, repo, cache);
        this.consensus_config = new Consensus_config.App(client, repo, cache);
        this.copyable_any = new Copyable_any.App(client, repo, cache);
        this.debug = new Debug.App(client, repo, cache);
        this.ed25519 = new Ed25519.App(client, repo, cache);
        this.error = new Error.App(client, repo, cache);
        this.event = new Event.App(client, repo, cache);
        this.features = new Features.App(client, repo, cache);
        this.fixed_point32 = new Fixed_point32.App(client, repo, cache);
        this.from_bcs = new From_bcs.App(client, repo, cache);
        this.gas_schedule = new Gas_schedule.App(client, repo, cache);
        this.genesis = new Genesis.App(client, repo, cache);
        this.governance_proposal = new Governance_proposal.App(client, repo, cache);
        this.guid = new Guid.App(client, repo, cache);
        this.hash = new Hash.App(client, repo, cache);
        this.managed_coin = new Managed_coin.App(client, repo, cache);
        this.math128 = new Math128.App(client, repo, cache);
        this.math64 = new Math64.App(client, repo, cache);
        this.multi_ed25519 = new Multi_ed25519.App(client, repo, cache);
        this.option = new Option.App(client, repo, cache);
        this.optional_aggregator = new Optional_aggregator.App(client, repo, cache);
        this.pool_u64 = new Pool_u64.App(client, repo, cache);
        this.reconfiguration = new Reconfiguration.App(client, repo, cache);
        this.resource_account = new Resource_account.App(client, repo, cache);
        this.ristretto255 = new Ristretto255.App(client, repo, cache);
        this.secp256k1 = new Secp256k1.App(client, repo, cache);
        this.signer = new Signer.App(client, repo, cache);
        this.simple_map = new Simple_map.App(client, repo, cache);
        this.stake = new Stake.App(client, repo, cache);
        this.staking_config = new Staking_config.App(client, repo, cache);
        this.staking_contract = new Staking_contract.App(client, repo, cache);
        this.staking_proxy = new Staking_proxy.App(client, repo, cache);
        this.state_storage = new State_storage.App(client, repo, cache);
        this.storage_gas = new Storage_gas.App(client, repo, cache);
        this.string = new String.App(client, repo, cache);
        this.system_addresses = new System_addresses.App(client, repo, cache);
        this.table = new Table.App(client, repo, cache);
        this.table_with_length = new Table_with_length.App(client, repo, cache);
        this.timestamp = new Timestamp.App(client, repo, cache);
        this.transaction_context = new Transaction_context.App(client, repo, cache);
        this.transaction_fee = new Transaction_fee.App(client, repo, cache);
        this.transaction_validation = new Transaction_validation.App(client, repo, cache);
        this.type_info = new Type_info.App(client, repo, cache);
        this.util = new Util.App(client, repo, cache);
        this.vector = new Vector.App(client, repo, cache);
        this.version = new Version.App(client, repo, cache);
        this.vesting = new Vesting.App(client, repo, cache);
        this.voting = new Voting.App(client, repo, cache);
    }
}
exports.App = App;
//# sourceMappingURL=index.js.map