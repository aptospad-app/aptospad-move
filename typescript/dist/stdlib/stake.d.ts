import * as $ from "@manahippo/move-to-ts";
import { AptosDataCache, AptosParserRepo, AptosLocalCache } from "@manahippo/move-to-ts";
import { U8, U64, U128 } from "@manahippo/move-to-ts";
import { TypeParamDeclType, FieldDeclType } from "@manahippo/move-to-ts";
import { StructTag, TypeTag } from "@manahippo/move-to-ts";
import { OptionTransaction } from "@manahippo/move-to-ts";
import { HexString, AptosClient, AptosAccount, TxnBuilderTypes, Types } from "aptos";
import * as Coin from "./coin";
import * as Event from "./event";
import * as Option from "./option";
import * as Staking_config from "./staking_config";
export declare const packageName = "AptosFramework";
export declare const moduleAddress: HexString;
export declare const moduleName = "stake";
export declare const EALREADY_ACTIVE_VALIDATOR: U64;
export declare const EALREADY_REGISTERED: U64;
export declare const EINELIGIBLE_VALIDATOR: U64;
export declare const EINVALID_LOCKUP: U64;
export declare const EINVALID_PUBLIC_KEY: U64;
export declare const ELAST_VALIDATOR: U64;
export declare const ENOT_OPERATOR: U64;
export declare const ENOT_VALIDATOR: U64;
export declare const ENO_POST_GENESIS_VALIDATOR_SET_CHANGE_ALLOWED: U64;
export declare const EOWNER_CAP_ALREADY_EXISTS: U64;
export declare const EOWNER_CAP_NOT_FOUND: U64;
export declare const ESTAKE_EXCEEDS_MAX: U64;
export declare const ESTAKE_POOL_DOES_NOT_EXIST: U64;
export declare const ESTAKE_TOO_HIGH: U64;
export declare const ESTAKE_TOO_LOW: U64;
export declare const EVALIDATOR_CONFIG: U64;
export declare const EVALIDATOR_SET_TOO_LARGE: U64;
export declare const EVOTING_POWER_INCREASE_EXCEEDS_LIMIT: U64;
export declare const MAX_REWARDS_RATE: U64;
export declare const MAX_VALIDATOR_SET_SIZE: U64;
export declare const VALIDATOR_STATUS_ACTIVE: U64;
export declare const VALIDATOR_STATUS_INACTIVE: U64;
export declare const VALIDATOR_STATUS_PENDING_ACTIVE: U64;
export declare const VALIDATOR_STATUS_PENDING_INACTIVE: U64;
export declare class AddStakeEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    pool_address: HexString;
    amount_added: U64;
    constructor(proto: any, typeTag: TypeTag);
    static AddStakeEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): AddStakeEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class AllowedValidators {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    accounts: HexString[];
    constructor(proto: any, typeTag: TypeTag);
    static AllowedValidatorsParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): AllowedValidators;
    static load(repo: AptosParserRepo, client: AptosClient, address: HexString, typeParams: TypeTag[]): Promise<AllowedValidators>;
    static loadByApp(app: $.AppType, address: HexString, typeParams: TypeTag[]): Promise<AllowedValidators>;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class AptosCoinCapabilities {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    mint_cap: Coin.MintCapability;
    constructor(proto: any, typeTag: TypeTag);
    static AptosCoinCapabilitiesParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): AptosCoinCapabilities;
    static load(repo: AptosParserRepo, client: AptosClient, address: HexString, typeParams: TypeTag[]): Promise<AptosCoinCapabilities>;
    static loadByApp(app: $.AppType, address: HexString, typeParams: TypeTag[]): Promise<AptosCoinCapabilities>;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class DistributeRewardsEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    pool_address: HexString;
    rewards_amount: U64;
    constructor(proto: any, typeTag: TypeTag);
    static DistributeRewardsEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): DistributeRewardsEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class IncreaseLockupEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    pool_address: HexString;
    old_locked_until_secs: U64;
    new_locked_until_secs: U64;
    constructor(proto: any, typeTag: TypeTag);
    static IncreaseLockupEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): IncreaseLockupEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class IndividualValidatorPerformance {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    successful_proposals: U64;
    failed_proposals: U64;
    constructor(proto: any, typeTag: TypeTag);
    static IndividualValidatorPerformanceParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): IndividualValidatorPerformance;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class JoinValidatorSetEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    pool_address: HexString;
    constructor(proto: any, typeTag: TypeTag);
    static JoinValidatorSetEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): JoinValidatorSetEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class LeaveValidatorSetEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    pool_address: HexString;
    constructor(proto: any, typeTag: TypeTag);
    static LeaveValidatorSetEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): LeaveValidatorSetEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class OwnerCapability {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    pool_address: HexString;
    constructor(proto: any, typeTag: TypeTag);
    static OwnerCapabilityParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): OwnerCapability;
    static load(repo: AptosParserRepo, client: AptosClient, address: HexString, typeParams: TypeTag[]): Promise<OwnerCapability>;
    static loadByApp(app: $.AppType, address: HexString, typeParams: TypeTag[]): Promise<OwnerCapability>;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class ReactivateStakeEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    pool_address: HexString;
    amount: U64;
    constructor(proto: any, typeTag: TypeTag);
    static ReactivateStakeEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): ReactivateStakeEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class RegisterValidatorCandidateEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    pool_address: HexString;
    constructor(proto: any, typeTag: TypeTag);
    static RegisterValidatorCandidateEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): RegisterValidatorCandidateEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class RotateConsensusKeyEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    pool_address: HexString;
    old_consensus_pubkey: U8[];
    new_consensus_pubkey: U8[];
    constructor(proto: any, typeTag: TypeTag);
    static RotateConsensusKeyEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): RotateConsensusKeyEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class SetOperatorEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    pool_address: HexString;
    old_operator: HexString;
    new_operator: HexString;
    constructor(proto: any, typeTag: TypeTag);
    static SetOperatorEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): SetOperatorEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class StakePool {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    active: Coin.Coin;
    inactive: Coin.Coin;
    pending_active: Coin.Coin;
    pending_inactive: Coin.Coin;
    locked_until_secs: U64;
    operator_address: HexString;
    delegated_voter: HexString;
    initialize_validator_events: Event.EventHandle;
    set_operator_events: Event.EventHandle;
    add_stake_events: Event.EventHandle;
    reactivate_stake_events: Event.EventHandle;
    rotate_consensus_key_events: Event.EventHandle;
    update_network_and_fullnode_addresses_events: Event.EventHandle;
    increase_lockup_events: Event.EventHandle;
    join_validator_set_events: Event.EventHandle;
    distribute_rewards_events: Event.EventHandle;
    unlock_stake_events: Event.EventHandle;
    withdraw_stake_events: Event.EventHandle;
    leave_validator_set_events: Event.EventHandle;
    constructor(proto: any, typeTag: TypeTag);
    static StakePoolParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): StakePool;
    static load(repo: AptosParserRepo, client: AptosClient, address: HexString, typeParams: TypeTag[]): Promise<StakePool>;
    static loadByApp(app: $.AppType, address: HexString, typeParams: TypeTag[]): Promise<StakePool>;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class UnlockStakeEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    pool_address: HexString;
    amount_unlocked: U64;
    constructor(proto: any, typeTag: TypeTag);
    static UnlockStakeEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): UnlockStakeEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class UpdateNetworkAndFullnodeAddressesEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    pool_address: HexString;
    old_network_addresses: U8[];
    new_network_addresses: U8[];
    old_fullnode_addresses: U8[];
    new_fullnode_addresses: U8[];
    constructor(proto: any, typeTag: TypeTag);
    static UpdateNetworkAndFullnodeAddressesEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): UpdateNetworkAndFullnodeAddressesEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class ValidatorConfig {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    consensus_pubkey: U8[];
    network_addresses: U8[];
    fullnode_addresses: U8[];
    validator_index: U64;
    constructor(proto: any, typeTag: TypeTag);
    static ValidatorConfigParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): ValidatorConfig;
    static load(repo: AptosParserRepo, client: AptosClient, address: HexString, typeParams: TypeTag[]): Promise<ValidatorConfig>;
    static loadByApp(app: $.AppType, address: HexString, typeParams: TypeTag[]): Promise<ValidatorConfig>;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class ValidatorInfo {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    addr: HexString;
    voting_power: U64;
    config: ValidatorConfig;
    constructor(proto: any, typeTag: TypeTag);
    static ValidatorInfoParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): ValidatorInfo;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class ValidatorPerformance {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    validators: IndividualValidatorPerformance[];
    constructor(proto: any, typeTag: TypeTag);
    static ValidatorPerformanceParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): ValidatorPerformance;
    static load(repo: AptosParserRepo, client: AptosClient, address: HexString, typeParams: TypeTag[]): Promise<ValidatorPerformance>;
    static loadByApp(app: $.AppType, address: HexString, typeParams: TypeTag[]): Promise<ValidatorPerformance>;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class ValidatorSet {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    consensus_scheme: U8;
    active_validators: ValidatorInfo[];
    pending_inactive: ValidatorInfo[];
    pending_active: ValidatorInfo[];
    total_voting_power: U128;
    total_joining_power: U128;
    constructor(proto: any, typeTag: TypeTag);
    static ValidatorSetParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): ValidatorSet;
    static load(repo: AptosParserRepo, client: AptosClient, address: HexString, typeParams: TypeTag[]): Promise<ValidatorSet>;
    static loadByApp(app: $.AppType, address: HexString, typeParams: TypeTag[]): Promise<ValidatorSet>;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class WithdrawStakeEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    pool_address: HexString;
    amount_withdrawn: U64;
    constructor(proto: any, typeTag: TypeTag);
    static WithdrawStakeEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): WithdrawStakeEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare function add_stake_(owner: HexString, amount: U64, $c: AptosDataCache): void;
export declare function buildPayload_add_stake(amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function add_stake_with_cap_(owner_cap: OwnerCapability, coins: Coin.Coin, $c: AptosDataCache): void;
export declare function append_(v1: any[], v2: any[], $c: AptosDataCache, $p: TypeTag[]): void;
export declare function assert_owner_cap_exists_(owner: HexString, $c: AptosDataCache): void;
export declare function assert_stake_pool_exists_(pool_address: HexString, $c: AptosDataCache): void;
export declare function calculate_rewards_amount_(stake_amount: U64, num_successful_proposals: U64, num_total_proposals: U64, rewards_rate: U64, rewards_rate_denominator: U64, $c: AptosDataCache): U64;
export declare function configure_allowed_validators_(aptos_framework: HexString, accounts: HexString[], $c: AptosDataCache): void;
export declare function deposit_owner_cap_(owner: HexString, owner_cap: OwnerCapability, $c: AptosDataCache): void;
export declare function destroy_owner_cap_(owner_cap: OwnerCapability, $c: AptosDataCache): void;
export declare function distribute_rewards_(stake: Coin.Coin, num_successful_proposals: U64, num_total_proposals: U64, rewards_rate: U64, rewards_rate_denominator: U64, $c: AptosDataCache): U64;
export declare function extract_owner_cap_(owner: HexString, $c: AptosDataCache): OwnerCapability;
export declare function find_validator_(v: ValidatorInfo[], addr: HexString, $c: AptosDataCache): Option.Option;
export declare function generate_validator_info_(addr: HexString, stake_pool: StakePool, config: ValidatorConfig, $c: AptosDataCache): ValidatorInfo;
export declare function get_current_epoch_proposal_counts_(validator_index: U64, $c: AptosDataCache): [U64, U64];
export declare function get_current_epoch_voting_power_(pool_address: HexString, $c: AptosDataCache): U64;
export declare function get_delegated_voter_(pool_address: HexString, $c: AptosDataCache): HexString;
export declare function get_lockup_secs_(pool_address: HexString, $c: AptosDataCache): U64;
export declare function get_next_epoch_voting_power_(stake_pool: StakePool, $c: AptosDataCache): U64;
export declare function get_operator_(pool_address: HexString, $c: AptosDataCache): HexString;
export declare function get_owned_pool_address_(owner_cap: OwnerCapability, $c: AptosDataCache): HexString;
export declare function get_remaining_lockup_secs_(pool_address: HexString, $c: AptosDataCache): U64;
export declare function get_stake_(pool_address: HexString, $c: AptosDataCache): [U64, U64, U64, U64];
export declare function get_validator_config_(pool_address: HexString, $c: AptosDataCache): [U8[], U8[], U8[]];
export declare function get_validator_index_(pool_address: HexString, $c: AptosDataCache): U64;
export declare function get_validator_state_(pool_address: HexString, $c: AptosDataCache): U64;
export declare function increase_lockup_(owner: HexString, $c: AptosDataCache): void;
export declare function buildPayload_increase_lockup(isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function increase_lockup_with_cap_(owner_cap: OwnerCapability, $c: AptosDataCache): void;
export declare function initialize_(aptos_framework: HexString, $c: AptosDataCache): void;
export declare function initialize_owner_(owner: HexString, $c: AptosDataCache): void;
export declare function initialize_stake_owner_(owner: HexString, initial_stake_amount: U64, operator: HexString, voter: HexString, $c: AptosDataCache): void;
export declare function buildPayload_initialize_stake_owner(initial_stake_amount: U64, operator: HexString, voter: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function initialize_validator_(account: HexString, consensus_pubkey: U8[], proof_of_possession: U8[], network_addresses: U8[], fullnode_addresses: U8[], $c: AptosDataCache): void;
export declare function buildPayload_initialize_validator(consensus_pubkey: U8[], proof_of_possession: U8[], network_addresses: U8[], fullnode_addresses: U8[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function is_allowed_(account: HexString, $c: AptosDataCache): boolean;
export declare function is_current_epoch_validator_(pool_address: HexString, $c: AptosDataCache): boolean;
export declare function join_validator_set_(operator: HexString, pool_address: HexString, $c: AptosDataCache): void;
export declare function buildPayload_join_validator_set(pool_address: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function join_validator_set_internal_(operator: HexString, pool_address: HexString, $c: AptosDataCache): void;
export declare function leave_validator_set_(operator: HexString, pool_address: HexString, $c: AptosDataCache): void;
export declare function buildPayload_leave_validator_set(pool_address: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function on_new_epoch_($c: AptosDataCache): void;
export declare function reactivate_stake_(owner: HexString, amount: U64, $c: AptosDataCache): void;
export declare function buildPayload_reactivate_stake(amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function reactivate_stake_with_cap_(owner_cap: OwnerCapability, amount: U64, $c: AptosDataCache): void;
export declare function remove_validators_(aptos_framework: HexString, validators: HexString[], $c: AptosDataCache): void;
export declare function rotate_consensus_key_(operator: HexString, pool_address: HexString, new_consensus_pubkey: U8[], proof_of_possession: U8[], $c: AptosDataCache): void;
export declare function buildPayload_rotate_consensus_key(pool_address: HexString, new_consensus_pubkey: U8[], proof_of_possession: U8[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function set_delegated_voter_(owner: HexString, new_voter: HexString, $c: AptosDataCache): void;
export declare function buildPayload_set_delegated_voter(new_voter: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function set_delegated_voter_with_cap_(owner_cap: OwnerCapability, new_voter: HexString, $c: AptosDataCache): void;
export declare function set_operator_(owner: HexString, new_operator: HexString, $c: AptosDataCache): void;
export declare function buildPayload_set_operator(new_operator: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function set_operator_with_cap_(owner_cap: OwnerCapability, new_operator: HexString, $c: AptosDataCache): void;
export declare function stake_pool_exists_(addr: HexString, $c: AptosDataCache): boolean;
export declare function store_aptos_coin_mint_cap_(aptos_framework: HexString, mint_cap: Coin.MintCapability, $c: AptosDataCache): void;
export declare function unlock_(owner: HexString, amount: U64, $c: AptosDataCache): void;
export declare function buildPayload_unlock(amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function unlock_with_cap_(amount: U64, owner_cap: OwnerCapability, $c: AptosDataCache): void;
export declare function update_network_and_fullnode_addresses_(operator: HexString, pool_address: HexString, new_network_addresses: U8[], new_fullnode_addresses: U8[], $c: AptosDataCache): void;
export declare function buildPayload_update_network_and_fullnode_addresses(pool_address: HexString, new_network_addresses: U8[], new_fullnode_addresses: U8[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function update_performance_statistics_(proposer_index: Option.Option, failed_proposer_indices: U64[], $c: AptosDataCache): void;
export declare function update_stake_pool_(validator_perf: ValidatorPerformance, pool_address: HexString, staking_config: Staking_config.StakingConfig, $c: AptosDataCache): void;
export declare function update_voting_power_increase_(increase_amount: U64, $c: AptosDataCache): void;
export declare function withdraw_(owner: HexString, withdraw_amount: U64, $c: AptosDataCache): void;
export declare function buildPayload_withdraw(withdraw_amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function withdraw_with_cap_(owner_cap: OwnerCapability, withdraw_amount: U64, $c: AptosDataCache): Coin.Coin;
export declare function loadParsers(repo: AptosParserRepo): void;
export declare class App {
    client: AptosClient;
    repo: AptosParserRepo;
    cache: AptosLocalCache;
    constructor(client: AptosClient, repo: AptosParserRepo, cache: AptosLocalCache);
    get moduleAddress(): HexString;
    get moduleName(): string;
    get AddStakeEvent(): typeof AddStakeEvent;
    get AllowedValidators(): typeof AllowedValidators;
    loadAllowedValidators(owner: HexString, loadFull?: boolean, fillCache?: boolean): Promise<AllowedValidators>;
    get AptosCoinCapabilities(): typeof AptosCoinCapabilities;
    loadAptosCoinCapabilities(owner: HexString, loadFull?: boolean, fillCache?: boolean): Promise<AptosCoinCapabilities>;
    get DistributeRewardsEvent(): typeof DistributeRewardsEvent;
    get IncreaseLockupEvent(): typeof IncreaseLockupEvent;
    get IndividualValidatorPerformance(): typeof IndividualValidatorPerformance;
    get JoinValidatorSetEvent(): typeof JoinValidatorSetEvent;
    get LeaveValidatorSetEvent(): typeof LeaveValidatorSetEvent;
    get OwnerCapability(): typeof OwnerCapability;
    loadOwnerCapability(owner: HexString, loadFull?: boolean, fillCache?: boolean): Promise<OwnerCapability>;
    get ReactivateStakeEvent(): typeof ReactivateStakeEvent;
    get RegisterValidatorCandidateEvent(): typeof RegisterValidatorCandidateEvent;
    get RotateConsensusKeyEvent(): typeof RotateConsensusKeyEvent;
    get SetOperatorEvent(): typeof SetOperatorEvent;
    get StakePool(): typeof StakePool;
    loadStakePool(owner: HexString, loadFull?: boolean, fillCache?: boolean): Promise<StakePool>;
    get UnlockStakeEvent(): typeof UnlockStakeEvent;
    get UpdateNetworkAndFullnodeAddressesEvent(): typeof UpdateNetworkAndFullnodeAddressesEvent;
    get ValidatorConfig(): typeof ValidatorConfig;
    loadValidatorConfig(owner: HexString, loadFull?: boolean, fillCache?: boolean): Promise<ValidatorConfig>;
    get ValidatorInfo(): typeof ValidatorInfo;
    get ValidatorPerformance(): typeof ValidatorPerformance;
    loadValidatorPerformance(owner: HexString, loadFull?: boolean, fillCache?: boolean): Promise<ValidatorPerformance>;
    get ValidatorSet(): typeof ValidatorSet;
    loadValidatorSet(owner: HexString, loadFull?: boolean, fillCache?: boolean): Promise<ValidatorSet>;
    get WithdrawStakeEvent(): typeof WithdrawStakeEvent;
    payload_add_stake(amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    add_stake(_account: AptosAccount, amount: U64, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_increase_lockup(isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    increase_lockup(_account: AptosAccount, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_initialize_stake_owner(initial_stake_amount: U64, operator: HexString, voter: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    initialize_stake_owner(_account: AptosAccount, initial_stake_amount: U64, operator: HexString, voter: HexString, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_initialize_validator(consensus_pubkey: U8[], proof_of_possession: U8[], network_addresses: U8[], fullnode_addresses: U8[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    initialize_validator(_account: AptosAccount, consensus_pubkey: U8[], proof_of_possession: U8[], network_addresses: U8[], fullnode_addresses: U8[], option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_join_validator_set(pool_address: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    join_validator_set(_account: AptosAccount, pool_address: HexString, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_leave_validator_set(pool_address: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    leave_validator_set(_account: AptosAccount, pool_address: HexString, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_reactivate_stake(amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    reactivate_stake(_account: AptosAccount, amount: U64, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_rotate_consensus_key(pool_address: HexString, new_consensus_pubkey: U8[], proof_of_possession: U8[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    rotate_consensus_key(_account: AptosAccount, pool_address: HexString, new_consensus_pubkey: U8[], proof_of_possession: U8[], option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_set_delegated_voter(new_voter: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    set_delegated_voter(_account: AptosAccount, new_voter: HexString, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_set_operator(new_operator: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    set_operator(_account: AptosAccount, new_operator: HexString, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_unlock(amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    unlock(_account: AptosAccount, amount: U64, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_update_network_and_fullnode_addresses(pool_address: HexString, new_network_addresses: U8[], new_fullnode_addresses: U8[], isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    update_network_and_fullnode_addresses(_account: AptosAccount, pool_address: HexString, new_network_addresses: U8[], new_fullnode_addresses: U8[], option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_withdraw(withdraw_amount: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    withdraw(_account: AptosAccount, withdraw_amount: U64, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
}
//# sourceMappingURL=stake.d.ts.map