import * as $ from "@manahippo/move-to-ts";
import { AptosDataCache, AptosParserRepo, AptosLocalCache } from "@manahippo/move-to-ts";
import { U8, U64 } from "@manahippo/move-to-ts";
import { TypeParamDeclType, FieldDeclType } from "@manahippo/move-to-ts";
import { StructTag, TypeTag } from "@manahippo/move-to-ts";
import { OptionTransaction } from "@manahippo/move-to-ts";
import { HexString, AptosClient, AptosAccount, TxnBuilderTypes, Types } from "aptos";
import * as Account from "./account";
import * as Coin from "./coin";
import * as Event from "./event";
import * as Fixed_point32 from "./fixed_point32";
import * as Pool_u64 from "./pool_u64";
import * as Simple_map from "./simple_map";
import * as String from "./string";
export declare const packageName = "AptosFramework";
export declare const moduleAddress: HexString;
export declare const moduleName = "vesting";
export declare const EEMPTY_VESTING_SCHEDULE: U64;
export declare const EINVALID_WITHDRAWAL_ADDRESS: U64;
export declare const ENOT_ADMIN: U64;
export declare const ENO_SHAREHOLDERS: U64;
export declare const EPENDING_STAKE_FOUND: U64;
export declare const EPERMISSION_DENIED: U64;
export declare const EROLE_NOT_FOUND: U64;
export declare const ESHARES_LENGTH_MISMATCH: U64;
export declare const EVESTING_ACCOUNT_HAS_NO_ROLES: U64;
export declare const EVESTING_CONTRACT_NOT_ACTIVE: U64;
export declare const EVESTING_CONTRACT_NOT_FOUND: U64;
export declare const EVESTING_CONTRACT_STILL_ACTIVE: U64;
export declare const EVESTING_START_TOO_SOON: U64;
export declare const EZERO_GRANT: U64;
export declare const EZERO_VESTING_SCHEDULE_PERIOD: U64;
export declare const MAXIMUM_SHAREHOLDERS: U64;
export declare const ROLE_BENEFICIARY_RESETTER: U8[];
export declare const VESTING_POOL_ACTIVE: U64;
export declare const VESTING_POOL_SALT: U8[];
export declare const VESTING_POOL_TERMINATED: U64;
export declare class AdminStore {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    vesting_contracts: HexString[];
    nonce: U64;
    create_events: Event.EventHandle;
    constructor(proto: any, typeTag: TypeTag);
    static AdminStoreParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): AdminStore;
    static load(repo: AptosParserRepo, client: AptosClient, address: HexString, typeParams: TypeTag[]): Promise<AdminStore>;
    static loadByApp(app: $.AppType, address: HexString, typeParams: TypeTag[]): Promise<AdminStore>;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class AdminWithdrawEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    admin: HexString;
    vesting_contract_address: HexString;
    amount: U64;
    constructor(proto: any, typeTag: TypeTag);
    static AdminWithdrawEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): AdminWithdrawEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class CreateVestingContractEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    operator: HexString;
    voter: HexString;
    grant_amount: U64;
    withdrawal_address: HexString;
    vesting_contract_address: HexString;
    staking_pool_address: HexString;
    commission_percentage: U64;
    constructor(proto: any, typeTag: TypeTag);
    static CreateVestingContractEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): CreateVestingContractEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class DistributeEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    admin: HexString;
    vesting_contract_address: HexString;
    amount: U64;
    constructor(proto: any, typeTag: TypeTag);
    static DistributeEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): DistributeEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class ResetLockupEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    admin: HexString;
    vesting_contract_address: HexString;
    staking_pool_address: HexString;
    new_lockup_expiration_secs: U64;
    constructor(proto: any, typeTag: TypeTag);
    static ResetLockupEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): ResetLockupEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class SetBeneficiaryEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    admin: HexString;
    vesting_contract_address: HexString;
    shareholder: HexString;
    old_beneficiary: HexString;
    new_beneficiary: HexString;
    constructor(proto: any, typeTag: TypeTag);
    static SetBeneficiaryEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): SetBeneficiaryEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class StakingInfo {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    pool_address: HexString;
    operator: HexString;
    voter: HexString;
    commission_percentage: U64;
    constructor(proto: any, typeTag: TypeTag);
    static StakingInfoParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): StakingInfo;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class TerminateEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    admin: HexString;
    vesting_contract_address: HexString;
    constructor(proto: any, typeTag: TypeTag);
    static TerminateEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): TerminateEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class UnlockRewardsEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    admin: HexString;
    vesting_contract_address: HexString;
    staking_pool_address: HexString;
    amount: U64;
    constructor(proto: any, typeTag: TypeTag);
    static UnlockRewardsEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): UnlockRewardsEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class UpdateOperatorEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    admin: HexString;
    vesting_contract_address: HexString;
    staking_pool_address: HexString;
    old_operator: HexString;
    new_operator: HexString;
    commission_percentage: U64;
    constructor(proto: any, typeTag: TypeTag);
    static UpdateOperatorEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): UpdateOperatorEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class UpdateVoterEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    admin: HexString;
    vesting_contract_address: HexString;
    staking_pool_address: HexString;
    old_voter: HexString;
    new_voter: HexString;
    constructor(proto: any, typeTag: TypeTag);
    static UpdateVoterEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): UpdateVoterEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class VestEvent {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    admin: HexString;
    vesting_contract_address: HexString;
    staking_pool_address: HexString;
    period_vested: U64;
    amount: U64;
    constructor(proto: any, typeTag: TypeTag);
    static VestEventParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): VestEvent;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class VestingAccountManagement {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    roles: Simple_map.SimpleMap;
    constructor(proto: any, typeTag: TypeTag);
    static VestingAccountManagementParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): VestingAccountManagement;
    static load(repo: AptosParserRepo, client: AptosClient, address: HexString, typeParams: TypeTag[]): Promise<VestingAccountManagement>;
    static loadByApp(app: $.AppType, address: HexString, typeParams: TypeTag[]): Promise<VestingAccountManagement>;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class VestingContract {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    state: U64;
    admin: HexString;
    grant_pool: Pool_u64.Pool;
    beneficiaries: Simple_map.SimpleMap;
    vesting_schedule: VestingSchedule;
    withdrawal_address: HexString;
    staking: StakingInfo;
    remaining_grant: U64;
    signer_cap: Account.SignerCapability;
    update_operator_events: Event.EventHandle;
    update_voter_events: Event.EventHandle;
    reset_lockup_events: Event.EventHandle;
    set_beneficiary_events: Event.EventHandle;
    unlock_rewards_events: Event.EventHandle;
    vest_events: Event.EventHandle;
    distribute_events: Event.EventHandle;
    terminate_events: Event.EventHandle;
    admin_withdraw_events: Event.EventHandle;
    constructor(proto: any, typeTag: TypeTag);
    static VestingContractParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): VestingContract;
    static load(repo: AptosParserRepo, client: AptosClient, address: HexString, typeParams: TypeTag[]): Promise<VestingContract>;
    static loadByApp(app: $.AppType, address: HexString, typeParams: TypeTag[]): Promise<VestingContract>;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare class VestingSchedule {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: $.AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    schedule: Fixed_point32.FixedPoint32[];
    start_timestamp_secs: U64;
    period_duration: U64;
    last_vested_period: U64;
    constructor(proto: any, typeTag: TypeTag);
    static VestingScheduleParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): VestingSchedule;
    static getTag(): StructTag;
    loadFullState(app: $.AppType): Promise<void>;
}
export declare function admin_withdraw_(admin: HexString, contract_address: HexString, $c: AptosDataCache): void;
export declare function buildPayload_admin_withdraw(contract_address: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function assert_active_vesting_contract_(contract_address: HexString, $c: AptosDataCache): void;
export declare function assert_vesting_contract_exists_(contract_address: HexString, $c: AptosDataCache): void;
export declare function beneficiary_(vesting_contract_address: HexString, shareholder: HexString, $c: AptosDataCache): HexString;
export declare function create_vesting_contract_(admin: HexString, shareholders: HexString[], buy_ins: Simple_map.SimpleMap, vesting_schedule: VestingSchedule, withdrawal_address: HexString, operator: HexString, voter: HexString, commission_percentage: U64, contract_creation_seed: U8[], $c: AptosDataCache): HexString;
export declare function create_vesting_contract_account_(admin: HexString, contract_creation_seed: U8[], $c: AptosDataCache): [HexString, Account.SignerCapability];
export declare function create_vesting_schedule_(schedule: Fixed_point32.FixedPoint32[], start_timestamp_secs: U64, period_duration: U64, $c: AptosDataCache): VestingSchedule;
export declare function distribute_(contract_address: HexString, $c: AptosDataCache): void;
export declare function buildPayload_distribute(contract_address: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function get_beneficiary_(contract: VestingContract, shareholder: HexString, $c: AptosDataCache): HexString;
export declare function get_role_holder_(contract_address: HexString, role: String.String, $c: AptosDataCache): HexString;
export declare function get_vesting_account_signer_(admin: HexString, contract_address: HexString, $c: AptosDataCache): HexString;
export declare function get_vesting_account_signer_internal_(vesting_contract: VestingContract, $c: AptosDataCache): HexString;
export declare function operator_(vesting_contract_address: HexString, $c: AptosDataCache): HexString;
export declare function operator_commission_percentage_(vesting_contract_address: HexString, $c: AptosDataCache): U64;
export declare function remaining_grant_(vesting_contract_address: HexString, $c: AptosDataCache): U64;
export declare function reset_beneficiary_(account: HexString, contract_address: HexString, shareholder: HexString, $c: AptosDataCache): void;
export declare function buildPayload_reset_beneficiary(contract_address: HexString, shareholder: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function reset_lockup_(admin: HexString, contract_address: HexString, $c: AptosDataCache): void;
export declare function buildPayload_reset_lockup(contract_address: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function set_beneficiary_(admin: HexString, contract_address: HexString, shareholder: HexString, new_beneficiary: HexString, $c: AptosDataCache): void;
export declare function buildPayload_set_beneficiary(contract_address: HexString, shareholder: HexString, new_beneficiary: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function set_beneficiary_resetter_(admin: HexString, contract_address: HexString, beneficiary_resetter: HexString, $c: AptosDataCache): void;
export declare function buildPayload_set_beneficiary_resetter(contract_address: HexString, beneficiary_resetter: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function set_management_role_(admin: HexString, contract_address: HexString, role: String.String, role_holder: HexString, $c: AptosDataCache): void;
export declare function buildPayload_set_management_role(contract_address: HexString, role: String.String, role_holder: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function stake_pool_address_(vesting_contract_address: HexString, $c: AptosDataCache): HexString;
export declare function terminate_vesting_contract_(admin: HexString, contract_address: HexString, $c: AptosDataCache): void;
export declare function buildPayload_terminate_vesting_contract(contract_address: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function unlock_rewards_(contract_address: HexString, $c: AptosDataCache): void;
export declare function buildPayload_unlock_rewards(contract_address: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function unlock_stake_(vesting_contract: VestingContract, amount: U64, $c: AptosDataCache): void;
export declare function update_operator_(admin: HexString, contract_address: HexString, new_operator: HexString, commission_percentage: U64, $c: AptosDataCache): void;
export declare function buildPayload_update_operator(contract_address: HexString, new_operator: HexString, commission_percentage: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function update_operator_with_same_commission_(admin: HexString, contract_address: HexString, new_operator: HexString, $c: AptosDataCache): void;
export declare function buildPayload_update_operator_with_same_commission(contract_address: HexString, new_operator: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function update_voter_(admin: HexString, contract_address: HexString, new_voter: HexString, $c: AptosDataCache): void;
export declare function buildPayload_update_voter(contract_address: HexString, new_voter: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function verify_admin_(admin: HexString, vesting_contract: VestingContract, $c: AptosDataCache): void;
export declare function vest_(contract_address: HexString, $c: AptosDataCache): void;
export declare function buildPayload_vest(contract_address: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
export declare function vesting_contracts_(admin: HexString, $c: AptosDataCache): HexString[];
export declare function vesting_start_secs_(vesting_contract_address: HexString, $c: AptosDataCache): U64;
export declare function voter_(vesting_contract_address: HexString, $c: AptosDataCache): HexString;
export declare function withdraw_stake_(vesting_contract: VestingContract, contract_address: HexString, $c: AptosDataCache): Coin.Coin;
export declare function loadParsers(repo: AptosParserRepo): void;
export declare class App {
    client: AptosClient;
    repo: AptosParserRepo;
    cache: AptosLocalCache;
    constructor(client: AptosClient, repo: AptosParserRepo, cache: AptosLocalCache);
    get moduleAddress(): HexString;
    get moduleName(): string;
    get AdminStore(): typeof AdminStore;
    loadAdminStore(owner: HexString, loadFull?: boolean, fillCache?: boolean): Promise<AdminStore>;
    get AdminWithdrawEvent(): typeof AdminWithdrawEvent;
    get CreateVestingContractEvent(): typeof CreateVestingContractEvent;
    get DistributeEvent(): typeof DistributeEvent;
    get ResetLockupEvent(): typeof ResetLockupEvent;
    get SetBeneficiaryEvent(): typeof SetBeneficiaryEvent;
    get StakingInfo(): typeof StakingInfo;
    get TerminateEvent(): typeof TerminateEvent;
    get UnlockRewardsEvent(): typeof UnlockRewardsEvent;
    get UpdateOperatorEvent(): typeof UpdateOperatorEvent;
    get UpdateVoterEvent(): typeof UpdateVoterEvent;
    get VestEvent(): typeof VestEvent;
    get VestingAccountManagement(): typeof VestingAccountManagement;
    loadVestingAccountManagement(owner: HexString, loadFull?: boolean, fillCache?: boolean): Promise<VestingAccountManagement>;
    get VestingContract(): typeof VestingContract;
    loadVestingContract(owner: HexString, loadFull?: boolean, fillCache?: boolean): Promise<VestingContract>;
    get VestingSchedule(): typeof VestingSchedule;
    payload_admin_withdraw(contract_address: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    admin_withdraw(_account: AptosAccount, contract_address: HexString, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_distribute(contract_address: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    distribute(_account: AptosAccount, contract_address: HexString, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_reset_beneficiary(contract_address: HexString, shareholder: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    reset_beneficiary(_account: AptosAccount, contract_address: HexString, shareholder: HexString, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_reset_lockup(contract_address: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    reset_lockup(_account: AptosAccount, contract_address: HexString, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_set_beneficiary(contract_address: HexString, shareholder: HexString, new_beneficiary: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    set_beneficiary(_account: AptosAccount, contract_address: HexString, shareholder: HexString, new_beneficiary: HexString, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_set_beneficiary_resetter(contract_address: HexString, beneficiary_resetter: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    set_beneficiary_resetter(_account: AptosAccount, contract_address: HexString, beneficiary_resetter: HexString, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_set_management_role(contract_address: HexString, role: String.String, role_holder: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    set_management_role(_account: AptosAccount, contract_address: HexString, role: String.String, role_holder: HexString, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_terminate_vesting_contract(contract_address: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    terminate_vesting_contract(_account: AptosAccount, contract_address: HexString, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_unlock_rewards(contract_address: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    unlock_rewards(_account: AptosAccount, contract_address: HexString, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_update_operator(contract_address: HexString, new_operator: HexString, commission_percentage: U64, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    update_operator(_account: AptosAccount, contract_address: HexString, new_operator: HexString, commission_percentage: U64, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_update_operator_with_same_commission(contract_address: HexString, new_operator: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    update_operator_with_same_commission(_account: AptosAccount, contract_address: HexString, new_operator: HexString, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_update_voter(contract_address: HexString, new_voter: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    update_voter(_account: AptosAccount, contract_address: HexString, new_voter: HexString, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
    payload_vest(contract_address: HexString, isJSON?: boolean): TxnBuilderTypes.TransactionPayloadEntryFunction | Types.TransactionPayload_EntryFunctionPayload;
    vest(_account: AptosAccount, contract_address: HexString, option?: OptionTransaction, _isJSON?: boolean): Promise<Types.UserTransaction>;
}
//# sourceMappingURL=vesting.d.ts.map