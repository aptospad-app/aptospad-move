
import { AptosParserRepo, getTypeTagFullname, StructTag, parseTypeTagOrThrow, u8, u64, u128, print, strToU8, u8str, DummyCache, ActualStringClass, sendPayloadTx, sendPayloadTxAndLog, getSimulationKeys } from "@manahippo/move-to-ts";
import { AptosAccount, AptosClient, HexString, Types } from "aptos";
import { Command } from "commander";
import { getProjectRepo } from "./";
import * as fs from "fs";
import * as yaml from "yaml";
import * as Aptospad from './aptospad';

export const readConfig = (program: Command) => {
  const {config, profile} = program.opts();
  const ymlContent = fs.readFileSync(config, {encoding: "utf-8"});
  const result = yaml.parse(ymlContent);
  //console.log(result);
  if (!result.profiles) {
    throw new Error("Expect a profiles to be present in yaml config");
  }
  if (!result.profiles[profile]) {
    throw new Error(`Expect a ${profile} profile to be present in yaml config`);
  }
  const url = result.profiles[profile].rest_url;
  const privateKeyStr = result.profiles[profile].private_key;
  if (!url) {
    throw new Error(`Expect rest_url to be present in ${profile} profile`);
  }
  if (!privateKeyStr) {
    throw new Error(`Expect private_key to be present in ${profile} profile`);
  }
  const privateKey = new HexString(privateKeyStr);
  const client = new AptosClient(result.profiles[profile].rest_url);
  const account = new AptosAccount(privateKey.toUint8Array());
  console.log(`Using address ${account.address().hex()}`);
  return {client, account};
}

const program = new Command();

program
  .name('yarn cli')
  .description('Move TS CLI generated by move-to-ts')
  .requiredOption('-c, --config <path>', 'path to your aptos config.yml (generated with "aptos init")')
  .option('-p, --profile <PROFILE>', 'aptos config profile to use', 'default')


const scripts_addWhiteList = async (user: string,cap: string,max_gas: string) => {
  const {client, account} = readConfig(program);
  const user_ = new HexString(user);
  const cap_ = u64(cap);
  const max_gas_ = parseInt(max_gas);
  const payload = Aptospad.Scripts.buildPayload_addWhiteList(user_, cap_);
  await sendPayloadTxAndLog(client, account, payload,{maxGasAmount: max_gas_});
}

program
  .command("scripts:addWhiteList")
  .description("")
  .argument('<user>')
  .argument('<cap>')
  .argument('[max_gas]', '', '10000')
  .action(scripts_addWhiteList);


const scripts_bidAptosPad = async (amount: string,max_gas: string) => {
  const {client, account} = readConfig(program);
  const amount_ = u64(amount);
  const max_gas_ = parseInt(max_gas);
  const payload = Aptospad.Scripts.buildPayload_bidAptosPad(amount_);
  await sendPayloadTxAndLog(client, account, payload,{maxGasAmount: max_gas_});
}

program
  .command("scripts:bidAptosPad")
  .description("")
  .argument('<amount>')
  .argument('[max_gas]', '', '10000')
  .action(scripts_bidAptosPad);


const scripts_distributeSeason = async (max_gas: string) => {
  const {client, account} = readConfig(program);
  const max_gas_ = parseInt(max_gas);
  const payload = Aptospad.Scripts.buildPayload_distributeSeason();
  await sendPayloadTxAndLog(client, account, payload,{maxGasAmount: max_gas_});
}

program
  .command("scripts:distributeSeason")
  .description("")
  .argument('[max_gas]', '', '10000')
  .action(scripts_distributeSeason);


const scripts_initializeAptosPad = async (preFundAptos: string,max_gas: string) => {
  const {client, account} = readConfig(program);
  const preFundAptos_ = u64(preFundAptos);
  const max_gas_ = parseInt(max_gas);
  const payload = Aptospad.Scripts.buildPayload_initializeAptosPad(preFundAptos_);
  await sendPayloadTxAndLog(client, account, payload,{maxGasAmount: max_gas_});
}

program
  .command("scripts:initializeAptosPad")
  .description("")
  .argument('<preFundAptos>')
  .argument('[max_gas]', '', '10000')
  .action(scripts_initializeAptosPad);


const scripts_launchPadSeason = async (max_gas: string) => {
  const {client, account} = readConfig(program);
  const max_gas_ = parseInt(max_gas);
  const payload = Aptospad.Scripts.buildPayload_launchPadSeason();
  await sendPayloadTxAndLog(client, account, payload,{maxGasAmount: max_gas_});
}

program
  .command("scripts:launchPadSeason")
  .description("")
  .argument('[max_gas]', '', '10000')
  .action(scripts_launchPadSeason);


const scripts_paycoinAndRefund = async (max_gas: string) => {
  const {client, account} = readConfig(program);
  const max_gas_ = parseInt(max_gas);
  const payload = Aptospad.Scripts.buildPayload_paycoinAndRefund();
  await sendPayloadTxAndLog(client, account, payload,{maxGasAmount: max_gas_});
}

program
  .command("scripts:paycoinAndRefund")
  .description("")
  .argument('[max_gas]', '', '10000')
  .action(scripts_paycoinAndRefund);


const scripts_resetSeason = async (max_gas: string) => {
  const {client, account} = readConfig(program);
  const max_gas_ = parseInt(max_gas);
  const payload = Aptospad.Scripts.buildPayload_resetSeason();
  await sendPayloadTxAndLog(client, account, payload,{maxGasAmount: max_gas_});
}

program
  .command("scripts:resetSeason")
  .description("")
  .argument('[max_gas]', '', '10000')
  .action(scripts_resetSeason);


const scripts_setApttSwapConfig = async (softCap: string,hardCap: string,enableRefund: string,aptToApttRate: string,bypassWhitelist: string,max_gas: string) => {
  const {client, account} = readConfig(program);
  const softCap_ = u64(softCap);
  const hardCap_ = u64(hardCap);
  const enableRefund_ = enableRefund=='true';
  const aptToApttRate_ = u64(aptToApttRate);
  const bypassWhitelist_ = bypassWhitelist=='true';
  const max_gas_ = parseInt(max_gas);
  const payload = Aptospad.Scripts.buildPayload_setApttSwapConfig(softCap_, hardCap_, enableRefund_, aptToApttRate_, bypassWhitelist_);
  await sendPayloadTxAndLog(client, account, payload,{maxGasAmount: max_gas_});
}

program
  .command("scripts:setApttSwapConfig")
  .description("")
  .argument('<softCap>')
  .argument('<hardCap>')
  .argument('<enableRefund>')
  .argument('<aptToApttRate>')
  .argument('<bypassWhitelist>')
  .argument('[max_gas]', '', '10000')
  .action(scripts_setApttSwapConfig);


const scripts_setBypassWhiteList = async (bypass: string,max_gas: string) => {
  const {client, account} = readConfig(program);
  const bypass_ = bypass=='true';
  const max_gas_ = parseInt(max_gas);
  const payload = Aptospad.Scripts.buildPayload_setBypassWhiteList(bypass_);
  await sendPayloadTxAndLog(client, account, payload,{maxGasAmount: max_gas_});
}

program
  .command("scripts:setBypassWhiteList")
  .description("")
  .argument('<bypass>')
  .argument('[max_gas]', '', '10000')
  .action(scripts_setBypassWhiteList);


const scripts_setEmergency = async (emergency: string,max_gas: string) => {
  const {client, account} = readConfig(program);
  const emergency_ = emergency=='true';
  const max_gas_ = parseInt(max_gas);
  const payload = Aptospad.Scripts.buildPayload_setEmergency(emergency_);
  await sendPayloadTxAndLog(client, account, payload,{maxGasAmount: max_gas_});
}

program
  .command("scripts:setEmergency")
  .description("")
  .argument('<emergency>')
  .argument('[max_gas]', '', '10000')
  .action(scripts_setEmergency);


const scripts_whiteListSeason = async (max_gas: string) => {
  const {client, account} = readConfig(program);
  const max_gas_ = parseInt(max_gas);
  const payload = Aptospad.Scripts.buildPayload_whiteListSeason();
  await sendPayloadTxAndLog(client, account, payload,{maxGasAmount: max_gas_});
}

program
  .command("scripts:whiteListSeason")
  .description("")
  .argument('[max_gas]', '', '10000')
  .action(scripts_whiteListSeason);


const scripts_withdrawAptos = async (debit: string,amount: string,max_gas: string) => {
  const {client, account} = readConfig(program);
  const debit_ = new HexString(debit);
  const amount_ = u64(amount);
  const max_gas_ = parseInt(max_gas);
  const payload = Aptospad.Scripts.buildPayload_withdrawAptos(debit_, amount_);
  await sendPayloadTxAndLog(client, account, payload,{maxGasAmount: max_gas_});
}

program
  .command("scripts:withdrawAptos")
  .description("")
  .argument('<debit>')
  .argument('<amount>')
  .argument('[max_gas]', '', '10000')
  .action(scripts_withdrawAptos);


const scripts_withdrawAptosPad = async (debit: string,amount: string,max_gas: string) => {
  const {client, account} = readConfig(program);
  const debit_ = new HexString(debit);
  const amount_ = u64(amount);
  const max_gas_ = parseInt(max_gas);
  const payload = Aptospad.Scripts.buildPayload_withdrawAptosPad(debit_, amount_);
  await sendPayloadTxAndLog(client, account, payload,{maxGasAmount: max_gas_});
}

program
  .command("scripts:withdrawAptosPad")
  .description("")
  .argument('<debit>')
  .argument('<amount>')
  .argument('[max_gas]', '', '10000')
  .action(scripts_withdrawAptosPad);




program.parse();
