import { AptosClient, HexString, Types } from "aptos";
import { AptosParserRepo, StructInfoType } from "./parserRepo";
import { TypeTag } from "./typeTag";
export interface ITable {
    handle: HexString;
    typeTag: TypeTag;
    loadFullState(app: AppType): Promise<void>;
    __app: AppType | null;
}
export interface IBox {
    val: any;
    typeTag: TypeTag;
    loadFullState(app: AppType): Promise<void>;
    __app: AppType | null;
}
export interface AptosDataCache {
    exists(tag: TypeTag, address: HexString): boolean;
    move_to(tag: TypeTag, address: HexString, resource: any): void;
    set(tag: TypeTag, address: HexString, resource: any): void;
    move_from<T>(tag: TypeTag, address: HexString): T;
    borrow_global<T>(tag: TypeTag, address: HexString): T;
    borrow_global_mut<T>(tag: TypeTag, address: HexString): T;
    exists_async(_tag: TypeTag, _address: HexString): Promise<boolean>;
    move_to_async(_tag: TypeTag, _address: HexString, _resource: any): Promise<void>;
    move_from_async<T>(_tag: TypeTag, _address: HexString): Promise<T>;
    borrow_global_async<T>(_tag: TypeTag, _address: HexString): Promise<T>;
    borrow_global_mut_async<T>(_tag: TypeTag, _address: HexString): Promise<T>;
    table_new_handle(): HexString;
    table_add_box(table: ITable, key: any, value: IBox): void;
    table_borrow_box(table: ITable, key: any): IBox;
    table_borrow_box_mut(table: ITable, key: any): IBox;
    table_contains_box(table: ITable, key: any): boolean;
    table_remove_box(table: ITable, key: any): IBox;
    table_destroy_empty_box(table: ITable): void;
    table_drop_unchecked_box(table: ITable): void;
}
export declare class DummyCache implements AptosDataCache {
    exists(_tag: TypeTag, _address: HexString): boolean;
    move_to(_tag: TypeTag, _address: HexString, _resource: any): void;
    set(_tag: TypeTag, _address: HexString, _resource: any): void;
    move_from<T>(_tag: TypeTag, _address: HexString): T;
    borrow_global<T>(_tag: TypeTag, _address: HexString): T;
    borrow_global_mut<T>(_tag: TypeTag, _address: HexString): T;
    exists_async(_tag: TypeTag, _address: HexString): Promise<boolean>;
    move_to_async(_tag: TypeTag, _address: HexString, _resource: any): Promise<void>;
    move_from_async<T>(_tag: TypeTag, _address: HexString): Promise<T>;
    borrow_global_async<T>(_tag: TypeTag, _address: HexString): Promise<T>;
    borrow_global_mut_async<T>(_tag: TypeTag, _address: HexString): Promise<T>;
    table_new_handle(): HexString;
    table_add_box(table: ITable, key: any, value: IBox): void;
    table_borrow_box(table: ITable, key: any): IBox;
    table_borrow_box_mut(table: ITable, key: any): IBox;
    table_contains_box(table: ITable, key: any): boolean;
    table_remove_box(table: ITable, key: any): IBox;
    table_destroy_empty_box(table: ITable): void;
    table_drop_unchecked_box(table: ITable): void;
}
declare class AccountCache {
    address: HexString;
    resources: Map<string, any>;
    constructor(address: HexString);
    has(tag: TypeTag): boolean;
    has_async(tag: TypeTag, repo: AptosParserRepo, client: AptosClient): Promise<boolean>;
    get(tag: TypeTag): any;
    get_async(tag: TypeTag, repo: AptosParserRepo, client: AptosClient): Promise<any>;
    set(tag: TypeTag, resource: any, overwrite?: boolean): void;
    move_from(tag: TypeTag): any;
}
export declare class AptosLocalCache implements AptosDataCache {
    accounts: Map<string, AccountCache>;
    tables: Map<string, Map<string, IBox>>;
    nextTableHandle: number;
    constructor();
    exists(tag: TypeTag, address: HexString): boolean;
    move_to(tag: TypeTag, address: HexString, resource: any, overwrite?: boolean): void;
    set(tag: TypeTag, address: HexString, resource: any): void;
    move_from<T>(tag: TypeTag, address: HexString): T;
    borrow_global<T>(tag: TypeTag, address: HexString): T;
    borrow_global_mut<T>(tag: TypeTag, address: HexString): T;
    exists_async(_tag: TypeTag, _address: HexString): Promise<boolean>;
    move_to_async(_tag: TypeTag, _address: HexString, _resource: any): Promise<void>;
    move_from_async<T>(_tag: TypeTag, _address: HexString): Promise<T>;
    borrow_global_async<T>(_tag: TypeTag, _address: HexString): Promise<T>;
    borrow_global_mut_async<T>(_tag: TypeTag, _address: HexString): Promise<T>;
    table_get_or_create(handle: HexString): Map<string, any>;
    table_new_handle(): HexString;
    table_add_box(table: ITable, key: any, value: IBox): void;
    table_borrow_box(table: ITable, key: any): IBox;
    table_borrow_box_mut(table: ITable, key: any): IBox;
    table_contains_box(table: ITable, key: any): boolean;
    table_remove_box(table: ITable, key: any): IBox;
    table_destroy_empty_box(table: ITable): void;
    table_drop_unchecked_box(table: ITable): void;
}
export declare class AptosSyncedCache extends AptosLocalCache {
    repo: AptosParserRepo;
    client: AptosClient;
    constructor(repo: AptosParserRepo, client: AptosClient);
    exists_async(tag: TypeTag, address: HexString): Promise<boolean>;
    move_to_async(tag: TypeTag, address: HexString, resource: any): Promise<void>;
    move_from_async<T>(tag: TypeTag, address: HexString): Promise<T>;
    borrow_global_async<T>(tag: TypeTag, address: HexString): Promise<T>;
    borrow_global_mut_async<T>(tag: TypeTag, address: HexString): Promise<T>;
}
export declare type UpdateType = "update" | "delete";
export declare type ListenerType = {
    id: string;
    callback: (type: UpdateType, value: any) => void;
};
export declare class AptosResourceCache {
    client: AptosClient;
    repo: AptosParserRepo;
    cachedResources: Record<string, any>;
    resourceKeyToLoadParams: Record<string, [
        StructInfoType,
        HexString,
        TypeTag[]
    ]>;
    updateListener: Record<string, ListenerType[]>;
    watchedAddresses: Set<HexString>;
    constructor(client: AptosClient, repo: AptosParserRepo);
    load<T extends StructInfoType>(struct: T, address: HexString, typeParams: TypeTag[], listener: ListenerType | null): Promise<any>;
    loadAccount(address: HexString, listener: ListenerType | null): Promise<string[]>;
    globalRefresh(): Promise<void>;
    addListenerForResource(resourceKey: string, listener: ListenerType): void;
    updateFromTransactionResult(txn: Types.UserTransaction): void;
    updateResource(resourceKey: string, value: any): void;
    deleteResource(resourceKey: string): void;
    getResourceKey(ownerAddress: HexString, typeTag: TypeTag): string;
}
export declare type AppType = {
    client: AptosClient;
    repo: AptosParserRepo;
    cache: AptosLocalCache;
};
export {};
//# sourceMappingURL=aptosDataCache.d.ts.map