import { TypeTag } from "./typeTag";
import { AptosClient, HexString } from "aptos";
import { U128, U64, U8 } from "./builtinTypes";
export declare type TypeParamDeclType = {
    name: string;
    isPhantom: boolean;
};
export declare type FieldDeclType = {
    name: string;
    typeTag: TypeTag;
};
export interface StructInfoType {
    moduleAddress: HexString;
    moduleName: string;
    structName: string;
    typeParameters: TypeParamDeclType[];
    fields: FieldDeclType[];
    new (proto: any, typeTag: TypeTag): any;
    load?(repo: AptosParserRepo, client: AptosClient, address: HexString, typeParams: TypeTag[]): Promise<any>;
}
export declare function parseStructProto(data: any, typeTag: TypeTag, repo: AptosParserRepo, struct: StructInfoType): any;
export declare type ParserFunc = (data: any, typeTag: TypeTag, repo: AptosParserRepo) => any;
export declare function U8Parser(data: any, typeTag: TypeTag, _repo: AptosParserRepo): U8;
export declare function U64Parser(data: any, typeTag: TypeTag, _repo: AptosParserRepo): U64;
export declare function U128Parser(data: any, typeTag: TypeTag, _repo: AptosParserRepo): U128;
export declare function BoolParser(data: any, typeTag: TypeTag, _repo: AptosParserRepo): boolean;
export declare function AddressParser(data: any, typeTag: TypeTag, _repo: AptosParserRepo): HexString;
export declare class AptosVectorU8 {
    u8Array: Uint8Array;
    constructor(input: number[] | string | Uint8Array);
    toString(): string;
    toHexString(): HexString;
    hex(): string;
    asNumbers(): number[];
}
export declare function numbersOrStringToHexString(input: number[] | Uint8Array | string): HexString;
export declare function VectorParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): any;
export declare class AptosParserRepo {
    paramlessNameToParser: Record<string, ParserFunc>;
    constructor();
    loadResource(client: AptosClient, address: HexString, structTsType: StructInfoType, typeParams: TypeTag[]): Promise<any>;
    loadEvents(client: AptosClient, address: HexString, containerTypeTag: TypeTag, field: string, query?: {
        start?: bigint | number;
        limit?: number;
    }): Promise<any[]>;
    parse(data: object, typeTag: TypeTag): any;
    getParserFromParamlessName(paramlessName: string): null | ParserFunc;
    getParserFromTypeTag(typeTag: TypeTag): ParserFunc | null;
    addParser(paramlessName: string, parser: ParserFunc): void;
    addDefaultParsers(): void;
}
//# sourceMappingURL=parserRepo.d.ts.map