import bigInt from "big-integer";
interface IntInterface<T> {
    value: bigInt.BigInteger;
    make(value: bigInt.BigInteger): T;
}
export declare function takeBigInt(from: UnsignedInt<any> | bigInt.BigInteger | string | number): bigInt.BigInteger;
export declare class UnsignedInt<T extends IntInterface<T>> {
    value: bigInt.BigInteger;
    constructor(value: bigInt.BigInteger | UnsignedInt<any> | string | number);
    checkBounds(): void;
    min(): bigInt.BigInteger;
    max(): bigInt.BigInteger;
    make(value: bigInt.BigInteger): UnsignedInt<T>;
    copy(): UnsignedInt<T>;
    toPayloadArg(): string;
    toJsNumber(): number;
    toBigInt(): bigint;
    $set(val: T): void;
    or(other: T): T;
    and(other: T): T;
    xor(other: T): T;
    add(other: T): T;
    sub(other: T): T;
    mul(other: T): T;
    div(other: T): T;
    mod(other: T): T;
    shl(other: UnsignedInt<any>): UnsignedInt<T>;
    shr(other: UnsignedInt<any>): UnsignedInt<T>;
    lt(other: T): boolean;
    le(other: T): boolean;
    eq(other: T): boolean;
    neq(other: T): boolean;
    gt(other: T): boolean;
    ge(other: T): boolean;
}
export declare class U8 extends UnsignedInt<U8> {
    static MIN: bigInt.BigInteger;
    static MAX: bigInt.BigInteger;
    make(value: bigInt.BigInteger): U8;
    checkBounds(): void;
    min(): bigInt.BigInteger;
    max(): bigInt.BigInteger;
}
export declare class U64 extends UnsignedInt<U64> {
    static MIN: bigInt.BigInteger;
    static MAX: bigInt.BigInteger;
    make(value: bigInt.BigInteger): U64;
    checkBounds(): void;
    min(): bigInt.BigInteger;
    max(): bigInt.BigInteger;
}
export declare class U128 extends UnsignedInt<U128> {
    static MIN: bigInt.BigInteger;
    static MAX: bigInt.BigInteger;
    make(value: bigInt.BigInteger): U128;
    checkBounds(): void;
    min(): bigInt.BigInteger;
    max(): bigInt.BigInteger;
}
export {};
//# sourceMappingURL=builtinTypes.d.ts.map