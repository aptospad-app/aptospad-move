import { HexString } from "aptos";
import { AptosDataCache, IBox, ITable, AppType } from "./aptosDataCache";
import { U128, U64, U8 } from "./builtinTypes";
import { StructTag, TypeTag } from "./typeTag";
import { AptosParserRepo, FieldDeclType, TypeParamDeclType } from "./parserRepo";
export declare function std_bcs_to_bytes(v: any, $c: AptosDataCache, tags: TypeTag[]): U8[];
export declare function aptos_framework_util_from_bytes(bytes: U8[], $c: AptosDataCache, tags: TypeTag[]): any;
export declare function aptos_std_any_from_bytes(bytes: U8[], $c: AptosDataCache, tags: TypeTag[]): any;
export declare function aptos_std_debug_print(v: any, $c: AptosDataCache, _: TypeTag[]): void;
export declare function aptos_std_debug_print_stack_trace($c: AptosDataCache): void;
export declare function aptos_framework_event_write_to_event_store(guid: U8[], count: U64, msg: any, $c: AptosDataCache, _tags: TypeTag[]): void;
export declare function aptos_std_event_write_to_event_store(guid: U8[], count: U64, msg: any, $c: AptosDataCache, _tags: TypeTag[]): void;
export declare function aptos_std_multi_ed25519_signature_verify_strict_internal(multisignature: U8[], public_key: U8[], message: U8[], $c: AptosDataCache): boolean;
export declare function aptos_std_multi_ed25519_public_key_validate_internal(bytes: U8[], $c: AptosDataCache): boolean;
export declare function aptos_std_from_bcs_from_bytes(bytes: U8[], $c: AptosDataCache, $p: TypeTag[]): any;
export declare function aptos_std_aptos_hash_keccak256(bytes: U8[], $c: AptosDataCache): U8[];
export declare function aptos_std_aptos_hash_ripemd160_internal(bytes: U8[], $c: AptosDataCache): U8[];
export declare function aptos_std_aptos_hash_sha2_512_internal(bytes: U8[], $c: AptosDataCache): U8[];
export declare function aptos_std_aptos_hash_sip_hash(bytes: U8[], $c: AptosDataCache): U64;
export declare function aptos_std_secp256k1_ecdsa_recover_internal(message: U8[], recovery_id: U8, signature: U8[], $c: AptosDataCache): [U8[], boolean];
export declare function std_hash_sha2_256(data: U8[], $c: AptosDataCache): U8[];
export declare function std_hash_sha3_256(data: U8[], $c: AptosDataCache): U8[];
export declare function std_signer_borrow_address(s: HexString, $c: AptosDataCache): HexString;
export declare function std_string_internal_check_utf8(v: U8[], $c: AptosDataCache): boolean;
export declare function std_string_internal_is_char_boundary(v: U8[], i: U64, $c: AptosDataCache): boolean;
export declare function std_string_internal_sub_string(v: U8[], i: U64, j: U64, $c: AptosDataCache): U8[];
export declare function std_string_internal_index_of(v: U8[], r: U8[], $c: AptosDataCache): U64;
export declare function std_unit_test_create_signers_for_testing(numSigners: U64, $c: AptosDataCache): HexString[];
export declare function std_vector_empty($c: AptosDataCache, tags: TypeTag[]): any[];
export declare function std_vector_length(vec: any[], $c: AptosDataCache, tags: TypeTag[]): U64;
export declare function std_vector_borrow(vec: any[], i: U64, $c: AptosDataCache, tags: TypeTag[]): any;
export declare function std_vector_push_back(vec: any[], e: any, $c: AptosDataCache, tags: TypeTag[]): void;
export declare function std_vector_borrow_mut(vec: any[], i: U64, $c: AptosDataCache, tags: TypeTag[]): any;
export declare function std_vector_pop_back(vec: any[], $c: AptosDataCache, tags: TypeTag[]): void;
export declare function std_vector_destroy_empty(vec: any[], $c: AptosDataCache, tags: TypeTag[]): void;
export declare function std_vector_swap(vec: any[], i: U64, j: U64, $c: AptosDataCache, tags: TypeTag[]): void;
export declare function aptos_framework_aggregator_add(aggregator: any, value: any, $c: any): void;
export declare function aptos_framework_aggregator_destroy(aggregator: any, $c: any): void;
export declare function aptos_framework_aggregator_read(aggregator: any, $c: any): U128;
export declare function aptos_framework_aggregator_sub(aggregator: any, value: any, $c: any): void;
export declare function aptos_framework_account_create_address(bytes: U8[], $c: AptosDataCache): HexString;
export declare function aptos_framework_genesis_create_signer(addr: HexString, $c: AptosDataCache): HexString;
export declare function aptos_framework_account_create_signer(addr: HexString, $c: AptosDataCache): HexString;
declare class ModuleMetadata {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    __app: AppType | null;
    name: ActualStringClass;
    source: ActualStringClass;
    source_map: U8[];
    abi: U8[];
    constructor(proto: any, typeTag: TypeTag);
    static ModuleMetadataParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): ModuleMetadata;
    loadFullState(app: AppType): Promise<void>;
}
export declare class PackageMetadata {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    __app: AppType | null;
    name: ActualStringClass;
    upgrade_policy: UpgradePolicy;
    manifest: ActualStringClass;
    modules: ModuleMetadata[];
    constructor(proto: any, typeTag: TypeTag);
    static PackageMetadataParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): PackageMetadata;
    loadFullState(app: AppType): Promise<void>;
}
export declare class UpgradePolicy {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    __app: AppType | null;
    policy: U8;
    constructor(proto: any, typeTag: TypeTag);
    static UpgradePolicyParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): UpgradePolicy;
    loadFullState(app: AppType): Promise<void>;
}
export declare function aptos_framework_code_request_publish(owner: HexString, expected_modules: ActualStringClass[], bundle: U8[][], policy: U8, $c: AptosDataCache): void;
export declare function aptos_framework_code_request_publish_with_allowed_deps(owner: HexString, expected_modules: ActualStringClass[], allowed_deps: any[], bundle: U8[][], policy: U8, $c: AptosDataCache): void;
export declare function aptos_std_bls12381_aggregate_pubkeys_internal(pubkeys: any, $c: AptosDataCache): [U8[], boolean];
export declare function aptos_std_bls12381_aggregate_signatures_internal(signatures: any, $c: AptosDataCache): [U8[], boolean];
export declare function aptos_std_bls12381_validate_pubkey_internal(pubkey: U8[], $c: AptosDataCache): boolean;
export declare function aptos_std_bls12381_signature_subgroup_check_internal(signature: any, $c: AptosDataCache): boolean;
export declare function aptos_std_bls12381_verify_aggregate_signature_internal(a: any, b: any, c: any, $c: AptosDataCache): boolean;
export declare function aptos_std_bls12381_verify_multisignature_internal(a: any, b: any, c: any, $c: AptosDataCache): boolean;
export declare function aptos_std_bls12381_verify_normal_signature_internal(signature: U8[], public_key: U8[], mesage: U8[], $c: AptosDataCache): boolean;
export declare function aptos_std_bls12381_verify_proof_of_possession_internal(public_key: U8[], proof_of_posession: U8[], $c: AptosDataCache): boolean;
export declare function aptos_std_bls12381_verify_signature_share_internal(a: any, b: any, c: any, $c: AptosDataCache): boolean;
export declare function aptos_std_ed25519_public_key_validate_internal(pubkey: U8[], $c: AptosDataCache): boolean;
export declare function aptos_std_ed25519_signature_verify_strict_internal(signature: U8[], pubkey: U8[], message: U8[], $c: AptosDataCache): boolean;
export declare function aptos_std_secp256k1_ecdsa_recover(message: U8[], recovery_id: U8, signature: U8[], $c: AptosDataCache): [U8[], boolean];
export declare function aptos_std_table_new_table_handle($c: AptosDataCache, tags: TypeTag[]): HexString;
export declare function aptos_std_table_add_box(table: ITable, key: any, value: IBox, $c: AptosDataCache, tags: TypeTag[]): void;
export declare function aptos_std_table_borrow_box(table: ITable, key: any, $c: AptosDataCache, tags: TypeTag[]): IBox;
export declare function aptos_std_table_borrow_box_mut(table: ITable, key: any, $c: AptosDataCache, tags: TypeTag[]): IBox;
export declare function aptos_std_table_contains_box(table: ITable, key: any, $c: AptosDataCache, tags: TypeTag[]): boolean;
export declare function aptos_std_table_remove_box(table: ITable, key: any, $c: AptosDataCache, tags: TypeTag[]): IBox;
export declare function aptos_std_table_destroy_empty_box(table: ITable, $c: AptosDataCache, tags: TypeTag[]): void;
export declare function aptos_std_table_drop_unchecked_box(table: ITable, $c: AptosDataCache, tags: TypeTag[]): void;
export declare function aptos_framework_transaction_context_get_script_hash($c: AptosDataCache): U8[];
export declare class ActualUsage {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    items: U64;
    bytes: U64;
    constructor(proto: any, typeTag: TypeTag);
    static UsageParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): ActualUsage;
    static getTag(): StructTag;
    loadFullState(app: AppType): Promise<void>;
}
export declare function aptos_framework_state_storage_get_state_storage_usage_only_at_epoch_beginning($c: any): ActualUsage;
export declare class ActualAggregator {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    __app: AppType | null;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    handle: HexString;
    key: HexString;
    limit: U128;
    constructor(proto: any, typeTag: TypeTag);
    static AggregatorParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): ActualAggregator;
    static getTag(): StructTag;
    loadFullState(app: AppType): Promise<void>;
}
export declare function aptos_framework_aggregator_factory_new_aggregator(p1: any, p2: any, p3: any): ActualAggregator;
export interface ITypeInfo {
    account_address: HexString;
    module_name: U8[];
    struct_name: U8[];
    typeTag: TypeTag;
    __app: AppType | null;
}
declare class ActualTypeInfoClass {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    __app: AppType | null;
    account_address: HexString;
    module_name: U8[];
    struct_name: U8[];
    constructor(proto: any, typeTag: TypeTag);
    typeFullname(): string;
    toTypeTag(): TypeTag;
    moduleName(): string;
    structName(): string;
    loadFullState(app: AppType): Promise<void>;
}
export declare class ActualStringClass {
    typeTag: TypeTag;
    static moduleAddress: HexString;
    static moduleName: string;
    static structName: string;
    static typeParameters: TypeParamDeclType[];
    static fields: FieldDeclType[];
    __app: AppType | null;
    bytes: U8[];
    constructor(proto: any, typeTag: TypeTag);
    static StringParser(data: any, typeTag: TypeTag, repo: AptosParserRepo): ActualStringClass;
    str(): string;
    loadFullState(app: AppType): Promise<void>;
}
export declare function aptos_std_type_info_type_of($c: AptosDataCache, tags: TypeTag[]): ActualTypeInfoClass;
export declare function aptos_std_type_info_type_name($c: AptosDataCache, tags: TypeTag[]): ActualStringClass;
export declare function aptos_std_type_info_chain_id_internal($c: AptosDataCache): U8;
export {};
//# sourceMappingURL=nativeFuncs.d.ts.map