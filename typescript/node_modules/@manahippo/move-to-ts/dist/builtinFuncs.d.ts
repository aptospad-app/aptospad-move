import { TypeTag } from "./typeTag";
import bigInt from "big-integer";
import { U8, U64, U128, UnsignedInt } from "./builtinTypes";
export declare function abortCode(code: any): any;
export declare function assert(cond: boolean, error: any): void;
export declare function u8(from: UnsignedInt<any> | bigInt.BigInteger | string | number): U8;
export declare function u64(from: UnsignedInt<any> | bigInt.BigInteger | string | number): U64;
export declare function u128(from: UnsignedInt<any> | bigInt.BigInteger | string | number): U128;
export declare function deep_eq(lhs: any, rhs: any): boolean;
export declare function dyn_add<T>(_tag: TypeTag, lhs: any, _rhs: any): void;
export declare function dyn_sub(_tag: TypeTag, _lhs: any, _rhs: any): void;
export declare function dyn_mul(_tag: TypeTag, _lhs: any, _rhs: any): void;
export declare function dyn_mod(_tag: TypeTag, _lhs: any, _rhs: any): void;
export declare function dyn_div(_tag: TypeTag, _lhs: any, _rhs: any): void;
export declare function dyn_bitor(_tag: TypeTag, _lhs: any, _rhs: any): void;
export declare function dyn_bitand(_tag: TypeTag, _lhs: any, _rhs: any): void;
export declare function dyn_xor(_tag: TypeTag, _lhs: any, _rhs: any): void;
export declare function dyn_shl(_tag: TypeTag, _lhs: any, _rhs: any): void;
export declare function dyn_shr(_tag: TypeTag, _lhs: any, _rhs: any): void;
export declare function dyn_and(_tag: TypeTag, _lhs: any, _rhs: any): void;
export declare function dyn_or(_tag: TypeTag, _lhs: any, _rhs: any): void;
export declare function dyn_eq(tag: TypeTag, lhs: any, rhs: any): boolean;
export declare function dyn_neq(tag: TypeTag, lhs: any, rhs: any): boolean;
export declare function dyn_lt(_tag: TypeTag, _lhs: any, _rhs: any): boolean;
export declare function dyn_gt(_tag: TypeTag, _lhs: any, _rhs: any): boolean;
export declare function dyn_le(_tag: TypeTag, _lhs: any, _rhs: any): boolean;
export declare function dyn_ge(_tag: TypeTag, _lhs: any, _rhs: any): boolean;
export declare function veq(lhs: any, rhs: any): boolean;
export declare function copy<T>(val: T): T;
export declare function printerReplacer(key: string, val: any): any;
export declare function print<T>(val: T): void;
export declare function set(lhs: any, rhs: any): void;
export declare function u8str(array: U8[]): string;
export declare function strToU8(str: string): U8[];
export declare function payloadArg(val: any): any;
export declare function u8ArrayArg(val: U8[]): string;
export declare function moveValueToOpenApiObject(val: any, typeTag: TypeTag): any;
//# sourceMappingURL=builtinFuncs.d.ts.map